/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dbs.clconnbc.additionalNameapi.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class SOWAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6537355988275731484L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SOWAvro\",\"namespace\":\"com.dbs.clconnbc.additionalNameapi.model\",\"fields\":[{\"name\":\"employment\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EmploymentAvro\",\"fields\":[{\"name\":\"employerName\",\"type\":\"string\"},{\"name\":\"pleaseElaborateOnSourceOfWealth\",\"type\":\"string\"}]}},\"default\":[]},{\"name\":\"business\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BusinessAvro\",\"fields\":[{\"name\":\"businessName\",\"type\":\"string\"},{\"name\":\"elaborateOnClientBusiness\",\"type\":\"string\"}]}},\"default\":[]},{\"name\":\"investment\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"InvestmentAvro\",\"fields\":[{\"name\":\"investmentType\",\"type\":\"string\"},{\"name\":\"sourceOfWealth\",\"type\":\"string\"},{\"name\":\"pleaseElaborateOnSourceOfWealth\",\"type\":\"string\"}]}},\"default\":[]},{\"name\":\"property\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PropertyAvro\",\"fields\":[{\"name\":\"propertyType\",\"type\":\"string\"},{\"name\":\"sourceOfWealth\",\"type\":\"string\"},{\"name\":\"pleaseElaborateOnSourceOfWealth\",\"type\":\"string\"}]}},\"default\":[]},{\"name\":\"inheritance\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"InheritanceAvro\",\"fields\":[{\"name\":\"giftorName\",\"type\":\"string\"},{\"name\":\"sourceOfWealthOfGiftor\",\"type\":\"string\"},{\"name\":\"pleaseElaborateOnSourceOfWealth\",\"type\":\"string\"}]}},\"default\":[]},{\"name\":\"otherSOW\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OtherSOWAvro\",\"fields\":[{\"name\":\"pleaseElaborateOnSourceOfWealth\",\"type\":\"string\"}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SOWAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SOWAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SOWAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SOWAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SOWAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SOWAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SOWAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SOWAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SOWAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<EmploymentAvro> employment;
  private java.util.List<BusinessAvro> business;
  private java.util.List<InvestmentAvro> investment;
  private java.util.List<PropertyAvro> property;
  private java.util.List<InheritanceAvro> inheritance;
  private java.util.List<OtherSOWAvro> otherSOW;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SOWAvro() {}

  /**
   * All-args constructor.
   * @param employment The new value for employment
   * @param business The new value for business
   * @param investment The new value for investment
   * @param property The new value for property
   * @param inheritance The new value for inheritance
   * @param otherSOW The new value for otherSOW
   */
  public SOWAvro(java.util.List<EmploymentAvro> employment, java.util.List<BusinessAvro> business, java.util.List<InvestmentAvro> investment, java.util.List<PropertyAvro> property, java.util.List<InheritanceAvro> inheritance, java.util.List<OtherSOWAvro> otherSOW) {
    this.employment = employment;
    this.business = business;
    this.investment = investment;
    this.property = property;
    this.inheritance = inheritance;
    this.otherSOW = otherSOW;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return employment;
    case 1: return business;
    case 2: return investment;
    case 3: return property;
    case 4: return inheritance;
    case 5: return otherSOW;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: employment = (java.util.List<EmploymentAvro>)value$; break;
    case 1: business = (java.util.List<BusinessAvro>)value$; break;
    case 2: investment = (java.util.List<InvestmentAvro>)value$; break;
    case 3: property = (java.util.List<PropertyAvro>)value$; break;
    case 4: inheritance = (java.util.List<InheritanceAvro>)value$; break;
    case 5: otherSOW = (java.util.List<OtherSOWAvro>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'employment' field.
   * @return The value of the 'employment' field.
   */
  public java.util.List<EmploymentAvro> getEmployment() {
    return employment;
  }


  /**
   * Sets the value of the 'employment' field.
   * @param value the value to set.
   */
  public void setEmployment(java.util.List<EmploymentAvro> value) {
    this.employment = value;
  }

  /**
   * Gets the value of the 'business' field.
   * @return The value of the 'business' field.
   */
  public java.util.List<BusinessAvro> getBusiness() {
    return business;
  }


  /**
   * Sets the value of the 'business' field.
   * @param value the value to set.
   */
  public void setBusiness(java.util.List<BusinessAvro> value) {
    this.business = value;
  }

  /**
   * Gets the value of the 'investment' field.
   * @return The value of the 'investment' field.
   */
  public java.util.List<InvestmentAvro> getInvestment() {
    return investment;
  }


  /**
   * Sets the value of the 'investment' field.
   * @param value the value to set.
   */
  public void setInvestment(java.util.List<InvestmentAvro> value) {
    this.investment = value;
  }

  /**
   * Gets the value of the 'property' field.
   * @return The value of the 'property' field.
   */
  public java.util.List<PropertyAvro> getProperty() {
    return property;
  }


  /**
   * Sets the value of the 'property' field.
   * @param value the value to set.
   */
  public void setProperty(java.util.List<PropertyAvro> value) {
    this.property = value;
  }

  /**
   * Gets the value of the 'inheritance' field.
   * @return The value of the 'inheritance' field.
   */
  public java.util.List<InheritanceAvro> getInheritance() {
    return inheritance;
  }


  /**
   * Sets the value of the 'inheritance' field.
   * @param value the value to set.
   */
  public void setInheritance(java.util.List<InheritanceAvro> value) {
    this.inheritance = value;
  }

  /**
   * Gets the value of the 'otherSOW' field.
   * @return The value of the 'otherSOW' field.
   */
  public java.util.List<OtherSOWAvro> getOtherSOW() {
    return otherSOW;
  }


  /**
   * Sets the value of the 'otherSOW' field.
   * @param value the value to set.
   */
  public void setOtherSOW(java.util.List<OtherSOWAvro> value) {
    this.otherSOW = value;
  }

  /**
   * Creates a new SOWAvro RecordBuilder.
   * @return A new SOWAvro RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new SOWAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SOWAvro RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new SOWAvro RecordBuilder by copying an existing SOWAvro instance.
   * @param other The existing instance to copy.
   * @return A new SOWAvro RecordBuilder
   */
  public static Builder newBuilder(SOWAvro other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for SOWAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SOWAvro>
    implements org.apache.avro.data.RecordBuilder<SOWAvro> {

    private java.util.List<EmploymentAvro> employment;
    private java.util.List<BusinessAvro> business;
    private java.util.List<InvestmentAvro> investment;
    private java.util.List<PropertyAvro> property;
    private java.util.List<InheritanceAvro> inheritance;
    private java.util.List<OtherSOWAvro> otherSOW;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.employment)) {
        this.employment = data().deepCopy(fields()[0].schema(), other.employment);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.business)) {
        this.business = data().deepCopy(fields()[1].schema(), other.business);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.investment)) {
        this.investment = data().deepCopy(fields()[2].schema(), other.investment);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.property)) {
        this.property = data().deepCopy(fields()[3].schema(), other.property);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.inheritance)) {
        this.inheritance = data().deepCopy(fields()[4].schema(), other.inheritance);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.otherSOW)) {
        this.otherSOW = data().deepCopy(fields()[5].schema(), other.otherSOW);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing SOWAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(SOWAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.employment)) {
        this.employment = data().deepCopy(fields()[0].schema(), other.employment);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.business)) {
        this.business = data().deepCopy(fields()[1].schema(), other.business);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.investment)) {
        this.investment = data().deepCopy(fields()[2].schema(), other.investment);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.property)) {
        this.property = data().deepCopy(fields()[3].schema(), other.property);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.inheritance)) {
        this.inheritance = data().deepCopy(fields()[4].schema(), other.inheritance);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.otherSOW)) {
        this.otherSOW = data().deepCopy(fields()[5].schema(), other.otherSOW);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'employment' field.
      * @return The value.
      */
    public java.util.List<EmploymentAvro> getEmployment() {
      return employment;
    }


    /**
      * Sets the value of the 'employment' field.
      * @param value The value of 'employment'.
      * @return This builder.
      */
    public Builder setEmployment(java.util.List<EmploymentAvro> value) {
      validate(fields()[0], value);
      this.employment = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'employment' field has been set.
      * @return True if the 'employment' field has been set, false otherwise.
      */
    public boolean hasEmployment() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'employment' field.
      * @return This builder.
      */
    public Builder clearEmployment() {
      employment = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'business' field.
      * @return The value.
      */
    public java.util.List<BusinessAvro> getBusiness() {
      return business;
    }


    /**
      * Sets the value of the 'business' field.
      * @param value The value of 'business'.
      * @return This builder.
      */
    public Builder setBusiness(java.util.List<BusinessAvro> value) {
      validate(fields()[1], value);
      this.business = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'business' field has been set.
      * @return True if the 'business' field has been set, false otherwise.
      */
    public boolean hasBusiness() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'business' field.
      * @return This builder.
      */
    public Builder clearBusiness() {
      business = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'investment' field.
      * @return The value.
      */
    public java.util.List<InvestmentAvro> getInvestment() {
      return investment;
    }


    /**
      * Sets the value of the 'investment' field.
      * @param value The value of 'investment'.
      * @return This builder.
      */
    public Builder setInvestment(java.util.List<InvestmentAvro> value) {
      validate(fields()[2], value);
      this.investment = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'investment' field has been set.
      * @return True if the 'investment' field has been set, false otherwise.
      */
    public boolean hasInvestment() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'investment' field.
      * @return This builder.
      */
    public Builder clearInvestment() {
      investment = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'property' field.
      * @return The value.
      */
    public java.util.List<PropertyAvro> getProperty() {
      return property;
    }


    /**
      * Sets the value of the 'property' field.
      * @param value The value of 'property'.
      * @return This builder.
      */
    public Builder setProperty(java.util.List<PropertyAvro> value) {
      validate(fields()[3], value);
      this.property = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'property' field has been set.
      * @return True if the 'property' field has been set, false otherwise.
      */
    public boolean hasProperty() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'property' field.
      * @return This builder.
      */
    public Builder clearProperty() {
      property = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'inheritance' field.
      * @return The value.
      */
    public java.util.List<InheritanceAvro> getInheritance() {
      return inheritance;
    }


    /**
      * Sets the value of the 'inheritance' field.
      * @param value The value of 'inheritance'.
      * @return This builder.
      */
    public Builder setInheritance(java.util.List<InheritanceAvro> value) {
      validate(fields()[4], value);
      this.inheritance = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'inheritance' field has been set.
      * @return True if the 'inheritance' field has been set, false otherwise.
      */
    public boolean hasInheritance() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'inheritance' field.
      * @return This builder.
      */
    public Builder clearInheritance() {
      inheritance = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'otherSOW' field.
      * @return The value.
      */
    public java.util.List<OtherSOWAvro> getOtherSOW() {
      return otherSOW;
    }


    /**
      * Sets the value of the 'otherSOW' field.
      * @param value The value of 'otherSOW'.
      * @return This builder.
      */
    public Builder setOtherSOW(java.util.List<OtherSOWAvro> value) {
      validate(fields()[5], value);
      this.otherSOW = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'otherSOW' field has been set.
      * @return True if the 'otherSOW' field has been set, false otherwise.
      */
    public boolean hasOtherSOW() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'otherSOW' field.
      * @return This builder.
      */
    public Builder clearOtherSOW() {
      otherSOW = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SOWAvro build() {
      try {
        SOWAvro record = new SOWAvro();
        record.employment = fieldSetFlags()[0] ? this.employment : (java.util.List<EmploymentAvro>) defaultValue(fields()[0]);
        record.business = fieldSetFlags()[1] ? this.business : (java.util.List<BusinessAvro>) defaultValue(fields()[1]);
        record.investment = fieldSetFlags()[2] ? this.investment : (java.util.List<InvestmentAvro>) defaultValue(fields()[2]);
        record.property = fieldSetFlags()[3] ? this.property : (java.util.List<PropertyAvro>) defaultValue(fields()[3]);
        record.inheritance = fieldSetFlags()[4] ? this.inheritance : (java.util.List<InheritanceAvro>) defaultValue(fields()[4]);
        record.otherSOW = fieldSetFlags()[5] ? this.otherSOW : (java.util.List<OtherSOWAvro>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SOWAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<SOWAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SOWAvro>
    READER$ = (org.apache.avro.io.DatumReader<SOWAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.employment.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (EmploymentAvro e0: this.employment) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.business.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (BusinessAvro e1: this.business) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.investment.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (InvestmentAvro e2: this.investment) {
      actualSize2++;
      out.startItem();
      e2.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    long size3 = this.property.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (PropertyAvro e3: this.property) {
      actualSize3++;
      out.startItem();
      e3.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

    long size4 = this.inheritance.size();
    out.writeArrayStart();
    out.setItemCount(size4);
    long actualSize4 = 0;
    for (InheritanceAvro e4: this.inheritance) {
      actualSize4++;
      out.startItem();
      e4.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize4 != size4)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");

    long size5 = this.otherSOW.size();
    out.writeArrayStart();
    out.setItemCount(size5);
    long actualSize5 = 0;
    for (OtherSOWAvro e5: this.otherSOW) {
      actualSize5++;
      out.startItem();
      e5.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize5 != size5)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<EmploymentAvro> a0 = this.employment;
      if (a0 == null) {
        a0 = new SpecificData.Array<EmploymentAvro>((int)size0, SCHEMA$.getField("employment").schema());
        this.employment = a0;
      } else a0.clear();
      SpecificData.Array<EmploymentAvro> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<EmploymentAvro>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          EmploymentAvro e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new EmploymentAvro();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<BusinessAvro> a1 = this.business;
      if (a1 == null) {
        a1 = new SpecificData.Array<BusinessAvro>((int)size1, SCHEMA$.getField("business").schema());
        this.business = a1;
      } else a1.clear();
      SpecificData.Array<BusinessAvro> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<BusinessAvro>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          BusinessAvro e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new BusinessAvro();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<InvestmentAvro> a2 = this.investment;
      if (a2 == null) {
        a2 = new SpecificData.Array<InvestmentAvro>((int)size2, SCHEMA$.getField("investment").schema());
        this.investment = a2;
      } else a2.clear();
      SpecificData.Array<InvestmentAvro> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<InvestmentAvro>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          InvestmentAvro e2 = (ga2 != null ? ga2.peek() : null);
          if (e2 == null) {
            e2 = new InvestmentAvro();
          }
          e2.customDecode(in);
          a2.add(e2);
        }
      }

      long size3 = in.readArrayStart();
      java.util.List<PropertyAvro> a3 = this.property;
      if (a3 == null) {
        a3 = new SpecificData.Array<PropertyAvro>((int)size3, SCHEMA$.getField("property").schema());
        this.property = a3;
      } else a3.clear();
      SpecificData.Array<PropertyAvro> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<PropertyAvro>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          PropertyAvro e3 = (ga3 != null ? ga3.peek() : null);
          if (e3 == null) {
            e3 = new PropertyAvro();
          }
          e3.customDecode(in);
          a3.add(e3);
        }
      }

      long size4 = in.readArrayStart();
      java.util.List<InheritanceAvro> a4 = this.inheritance;
      if (a4 == null) {
        a4 = new SpecificData.Array<InheritanceAvro>((int)size4, SCHEMA$.getField("inheritance").schema());
        this.inheritance = a4;
      } else a4.clear();
      SpecificData.Array<InheritanceAvro> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<InheritanceAvro>)a4 : null);
      for ( ; 0 < size4; size4 = in.arrayNext()) {
        for ( ; size4 != 0; size4--) {
          InheritanceAvro e4 = (ga4 != null ? ga4.peek() : null);
          if (e4 == null) {
            e4 = new InheritanceAvro();
          }
          e4.customDecode(in);
          a4.add(e4);
        }
      }

      long size5 = in.readArrayStart();
      java.util.List<OtherSOWAvro> a5 = this.otherSOW;
      if (a5 == null) {
        a5 = new SpecificData.Array<OtherSOWAvro>((int)size5, SCHEMA$.getField("otherSOW").schema());
        this.otherSOW = a5;
      } else a5.clear();
      SpecificData.Array<OtherSOWAvro> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<OtherSOWAvro>)a5 : null);
      for ( ; 0 < size5; size5 = in.arrayNext()) {
        for ( ; size5 != 0; size5--) {
          OtherSOWAvro e5 = (ga5 != null ? ga5.peek() : null);
          if (e5 == null) {
            e5 = new OtherSOWAvro();
          }
          e5.customDecode(in);
          a5.add(e5);
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<EmploymentAvro> a0 = this.employment;
          if (a0 == null) {
            a0 = new SpecificData.Array<EmploymentAvro>((int)size0, SCHEMA$.getField("employment").schema());
            this.employment = a0;
          } else a0.clear();
          SpecificData.Array<EmploymentAvro> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<EmploymentAvro>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              EmploymentAvro e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new EmploymentAvro();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readArrayStart();
          java.util.List<BusinessAvro> a1 = this.business;
          if (a1 == null) {
            a1 = new SpecificData.Array<BusinessAvro>((int)size1, SCHEMA$.getField("business").schema());
            this.business = a1;
          } else a1.clear();
          SpecificData.Array<BusinessAvro> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<BusinessAvro>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              BusinessAvro e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new BusinessAvro();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        case 2:
          long size2 = in.readArrayStart();
          java.util.List<InvestmentAvro> a2 = this.investment;
          if (a2 == null) {
            a2 = new SpecificData.Array<InvestmentAvro>((int)size2, SCHEMA$.getField("investment").schema());
            this.investment = a2;
          } else a2.clear();
          SpecificData.Array<InvestmentAvro> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<InvestmentAvro>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              InvestmentAvro e2 = (ga2 != null ? ga2.peek() : null);
              if (e2 == null) {
                e2 = new InvestmentAvro();
              }
              e2.customDecode(in);
              a2.add(e2);
            }
          }
          break;

        case 3:
          long size3 = in.readArrayStart();
          java.util.List<PropertyAvro> a3 = this.property;
          if (a3 == null) {
            a3 = new SpecificData.Array<PropertyAvro>((int)size3, SCHEMA$.getField("property").schema());
            this.property = a3;
          } else a3.clear();
          SpecificData.Array<PropertyAvro> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<PropertyAvro>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              PropertyAvro e3 = (ga3 != null ? ga3.peek() : null);
              if (e3 == null) {
                e3 = new PropertyAvro();
              }
              e3.customDecode(in);
              a3.add(e3);
            }
          }
          break;

        case 4:
          long size4 = in.readArrayStart();
          java.util.List<InheritanceAvro> a4 = this.inheritance;
          if (a4 == null) {
            a4 = new SpecificData.Array<InheritanceAvro>((int)size4, SCHEMA$.getField("inheritance").schema());
            this.inheritance = a4;
          } else a4.clear();
          SpecificData.Array<InheritanceAvro> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<InheritanceAvro>)a4 : null);
          for ( ; 0 < size4; size4 = in.arrayNext()) {
            for ( ; size4 != 0; size4--) {
              InheritanceAvro e4 = (ga4 != null ? ga4.peek() : null);
              if (e4 == null) {
                e4 = new InheritanceAvro();
              }
              e4.customDecode(in);
              a4.add(e4);
            }
          }
          break;

        case 5:
          long size5 = in.readArrayStart();
          java.util.List<OtherSOWAvro> a5 = this.otherSOW;
          if (a5 == null) {
            a5 = new SpecificData.Array<OtherSOWAvro>((int)size5, SCHEMA$.getField("otherSOW").schema());
            this.otherSOW = a5;
          } else a5.clear();
          SpecificData.Array<OtherSOWAvro> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<OtherSOWAvro>)a5 : null);
          for ( ; 0 < size5; size5 = in.arrayNext()) {
            for ( ; size5 != 0; size5--) {
              OtherSOWAvro e5 = (ga5 != null ? ga5.peek() : null);
              if (e5 == null) {
                e5 = new OtherSOWAvro();
              }
              e5.customDecode(in);
              a5.add(e5);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










