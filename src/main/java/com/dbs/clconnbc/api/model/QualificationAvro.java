/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dbs.clconnbc.api.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class QualificationAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1627852555848451346L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"QualificationAvro\",\"namespace\":\"com.dbs.clconnbc.api.model\",\"fields\":[{\"name\":\"hitRelevancy\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"identification\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"hitJustification\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"materiality\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"reason\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]},{\"name\":\"otherReason\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"justification\",\"type\":\"string\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<QualificationAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<QualificationAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<QualificationAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<QualificationAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<QualificationAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this QualificationAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a QualificationAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a QualificationAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static QualificationAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence hitRelevancy;
  private CharSequence identification;
  private CharSequence hitJustification;
  private CharSequence materiality;
  private java.util.List<CharSequence> reason;
  private CharSequence otherReason;
  private CharSequence justification;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public QualificationAvro() {}

  /**
   * All-args constructor.
   * @param hitRelevancy The new value for hitRelevancy
   * @param identification The new value for identification
   * @param hitJustification The new value for hitJustification
   * @param materiality The new value for materiality
   * @param reason The new value for reason
   * @param otherReason The new value for otherReason
   * @param justification The new value for justification
   */
  public QualificationAvro(CharSequence hitRelevancy, CharSequence identification, CharSequence hitJustification, CharSequence materiality, java.util.List<CharSequence> reason, CharSequence otherReason, CharSequence justification) {
    this.hitRelevancy = hitRelevancy;
    this.identification = identification;
    this.hitJustification = hitJustification;
    this.materiality = materiality;
    this.reason = reason;
    this.otherReason = otherReason;
    this.justification = justification;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return hitRelevancy;
    case 1: return identification;
    case 2: return hitJustification;
    case 3: return materiality;
    case 4: return reason;
    case 5: return otherReason;
    case 6: return justification;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: hitRelevancy = (CharSequence)value$; break;
    case 1: identification = (CharSequence)value$; break;
    case 2: hitJustification = (CharSequence)value$; break;
    case 3: materiality = (CharSequence)value$; break;
    case 4: reason = (java.util.List<CharSequence>)value$; break;
    case 5: otherReason = (CharSequence)value$; break;
    case 6: justification = (CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'hitRelevancy' field.
   * @return The value of the 'hitRelevancy' field.
   */
  public CharSequence getHitRelevancy() {
    return hitRelevancy;
  }


  /**
   * Sets the value of the 'hitRelevancy' field.
   * @param value the value to set.
   */
  public void setHitRelevancy(CharSequence value) {
    this.hitRelevancy = value;
  }

  /**
   * Gets the value of the 'identification' field.
   * @return The value of the 'identification' field.
   */
  public CharSequence getIdentification() {
    return identification;
  }


  /**
   * Sets the value of the 'identification' field.
   * @param value the value to set.
   */
  public void setIdentification(CharSequence value) {
    this.identification = value;
  }

  /**
   * Gets the value of the 'hitJustification' field.
   * @return The value of the 'hitJustification' field.
   */
  public CharSequence getHitJustification() {
    return hitJustification;
  }


  /**
   * Sets the value of the 'hitJustification' field.
   * @param value the value to set.
   */
  public void setHitJustification(CharSequence value) {
    this.hitJustification = value;
  }

  /**
   * Gets the value of the 'materiality' field.
   * @return The value of the 'materiality' field.
   */
  public CharSequence getMateriality() {
    return materiality;
  }


  /**
   * Sets the value of the 'materiality' field.
   * @param value the value to set.
   */
  public void setMateriality(CharSequence value) {
    this.materiality = value;
  }

  /**
   * Gets the value of the 'reason' field.
   * @return The value of the 'reason' field.
   */
  public java.util.List<CharSequence> getReason() {
    return reason;
  }


  /**
   * Sets the value of the 'reason' field.
   * @param value the value to set.
   */
  public void setReason(java.util.List<CharSequence> value) {
    this.reason = value;
  }

  /**
   * Gets the value of the 'otherReason' field.
   * @return The value of the 'otherReason' field.
   */
  public CharSequence getOtherReason() {
    return otherReason;
  }


  /**
   * Sets the value of the 'otherReason' field.
   * @param value the value to set.
   */
  public void setOtherReason(CharSequence value) {
    this.otherReason = value;
  }

  /**
   * Gets the value of the 'justification' field.
   * @return The value of the 'justification' field.
   */
  public CharSequence getJustification() {
    return justification;
  }


  /**
   * Sets the value of the 'justification' field.
   * @param value the value to set.
   */
  public void setJustification(CharSequence value) {
    this.justification = value;
  }

  /**
   * Creates a new QualificationAvro RecordBuilder.
   * @return A new QualificationAvro RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new QualificationAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new QualificationAvro RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new QualificationAvro RecordBuilder by copying an existing QualificationAvro instance.
   * @param other The existing instance to copy.
   * @return A new QualificationAvro RecordBuilder
   */
  public static Builder newBuilder(QualificationAvro other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for QualificationAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<QualificationAvro>
    implements org.apache.avro.data.RecordBuilder<QualificationAvro> {

    private CharSequence hitRelevancy;
    private CharSequence identification;
    private CharSequence hitJustification;
    private CharSequence materiality;
    private java.util.List<CharSequence> reason;
    private CharSequence otherReason;
    private CharSequence justification;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hitRelevancy)) {
        this.hitRelevancy = data().deepCopy(fields()[0].schema(), other.hitRelevancy);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.identification)) {
        this.identification = data().deepCopy(fields()[1].schema(), other.identification);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.hitJustification)) {
        this.hitJustification = data().deepCopy(fields()[2].schema(), other.hitJustification);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.materiality)) {
        this.materiality = data().deepCopy(fields()[3].schema(), other.materiality);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.reason)) {
        this.reason = data().deepCopy(fields()[4].schema(), other.reason);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.otherReason)) {
        this.otherReason = data().deepCopy(fields()[5].schema(), other.otherReason);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.justification)) {
        this.justification = data().deepCopy(fields()[6].schema(), other.justification);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing QualificationAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(QualificationAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.hitRelevancy)) {
        this.hitRelevancy = data().deepCopy(fields()[0].schema(), other.hitRelevancy);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.identification)) {
        this.identification = data().deepCopy(fields()[1].schema(), other.identification);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hitJustification)) {
        this.hitJustification = data().deepCopy(fields()[2].schema(), other.hitJustification);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.materiality)) {
        this.materiality = data().deepCopy(fields()[3].schema(), other.materiality);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.reason)) {
        this.reason = data().deepCopy(fields()[4].schema(), other.reason);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.otherReason)) {
        this.otherReason = data().deepCopy(fields()[5].schema(), other.otherReason);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.justification)) {
        this.justification = data().deepCopy(fields()[6].schema(), other.justification);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'hitRelevancy' field.
      * @return The value.
      */
    public CharSequence getHitRelevancy() {
      return hitRelevancy;
    }


    /**
      * Sets the value of the 'hitRelevancy' field.
      * @param value The value of 'hitRelevancy'.
      * @return This builder.
      */
    public Builder setHitRelevancy(CharSequence value) {
      validate(fields()[0], value);
      this.hitRelevancy = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'hitRelevancy' field has been set.
      * @return True if the 'hitRelevancy' field has been set, false otherwise.
      */
    public boolean hasHitRelevancy() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'hitRelevancy' field.
      * @return This builder.
      */
    public Builder clearHitRelevancy() {
      hitRelevancy = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'identification' field.
      * @return The value.
      */
    public CharSequence getIdentification() {
      return identification;
    }


    /**
      * Sets the value of the 'identification' field.
      * @param value The value of 'identification'.
      * @return This builder.
      */
    public Builder setIdentification(CharSequence value) {
      validate(fields()[1], value);
      this.identification = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'identification' field has been set.
      * @return True if the 'identification' field has been set, false otherwise.
      */
    public boolean hasIdentification() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'identification' field.
      * @return This builder.
      */
    public Builder clearIdentification() {
      identification = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'hitJustification' field.
      * @return The value.
      */
    public CharSequence getHitJustification() {
      return hitJustification;
    }


    /**
      * Sets the value of the 'hitJustification' field.
      * @param value The value of 'hitJustification'.
      * @return This builder.
      */
    public Builder setHitJustification(CharSequence value) {
      validate(fields()[2], value);
      this.hitJustification = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'hitJustification' field has been set.
      * @return True if the 'hitJustification' field has been set, false otherwise.
      */
    public boolean hasHitJustification() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'hitJustification' field.
      * @return This builder.
      */
    public Builder clearHitJustification() {
      hitJustification = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'materiality' field.
      * @return The value.
      */
    public CharSequence getMateriality() {
      return materiality;
    }


    /**
      * Sets the value of the 'materiality' field.
      * @param value The value of 'materiality'.
      * @return This builder.
      */
    public Builder setMateriality(CharSequence value) {
      validate(fields()[3], value);
      this.materiality = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'materiality' field has been set.
      * @return True if the 'materiality' field has been set, false otherwise.
      */
    public boolean hasMateriality() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'materiality' field.
      * @return This builder.
      */
    public Builder clearMateriality() {
      materiality = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'reason' field.
      * @return The value.
      */
    public java.util.List<CharSequence> getReason() {
      return reason;
    }


    /**
      * Sets the value of the 'reason' field.
      * @param value The value of 'reason'.
      * @return This builder.
      */
    public Builder setReason(java.util.List<CharSequence> value) {
      validate(fields()[4], value);
      this.reason = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'reason' field has been set.
      * @return True if the 'reason' field has been set, false otherwise.
      */
    public boolean hasReason() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'reason' field.
      * @return This builder.
      */
    public Builder clearReason() {
      reason = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'otherReason' field.
      * @return The value.
      */
    public CharSequence getOtherReason() {
      return otherReason;
    }


    /**
      * Sets the value of the 'otherReason' field.
      * @param value The value of 'otherReason'.
      * @return This builder.
      */
    public Builder setOtherReason(CharSequence value) {
      validate(fields()[5], value);
      this.otherReason = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'otherReason' field has been set.
      * @return True if the 'otherReason' field has been set, false otherwise.
      */
    public boolean hasOtherReason() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'otherReason' field.
      * @return This builder.
      */
    public Builder clearOtherReason() {
      otherReason = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'justification' field.
      * @return The value.
      */
    public CharSequence getJustification() {
      return justification;
    }


    /**
      * Sets the value of the 'justification' field.
      * @param value The value of 'justification'.
      * @return This builder.
      */
    public Builder setJustification(CharSequence value) {
      validate(fields()[6], value);
      this.justification = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'justification' field has been set.
      * @return True if the 'justification' field has been set, false otherwise.
      */
    public boolean hasJustification() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'justification' field.
      * @return This builder.
      */
    public Builder clearJustification() {
      justification = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public QualificationAvro build() {
      try {
        QualificationAvro record = new QualificationAvro();
        record.hitRelevancy = fieldSetFlags()[0] ? this.hitRelevancy : (CharSequence) defaultValue(fields()[0]);
        record.identification = fieldSetFlags()[1] ? this.identification : (CharSequence) defaultValue(fields()[1]);
        record.hitJustification = fieldSetFlags()[2] ? this.hitJustification : (CharSequence) defaultValue(fields()[2]);
        record.materiality = fieldSetFlags()[3] ? this.materiality : (CharSequence) defaultValue(fields()[3]);
        record.reason = fieldSetFlags()[4] ? this.reason : (java.util.List<CharSequence>) defaultValue(fields()[4]);
        record.otherReason = fieldSetFlags()[5] ? this.otherReason : (CharSequence) defaultValue(fields()[5]);
        record.justification = fieldSetFlags()[6] ? this.justification : (CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<QualificationAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<QualificationAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<QualificationAvro>
    READER$ = (org.apache.avro.io.DatumReader<QualificationAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.hitRelevancy);

    out.writeString(this.identification);

    out.writeString(this.hitJustification);

    out.writeString(this.materiality);

    long size0 = this.reason.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (CharSequence e0: this.reason) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.otherReason);

    out.writeString(this.justification);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.hitRelevancy = in.readString(this.hitRelevancy instanceof Utf8 ? (Utf8)this.hitRelevancy : null);

      this.identification = in.readString(this.identification instanceof Utf8 ? (Utf8)this.identification : null);

      this.hitJustification = in.readString(this.hitJustification instanceof Utf8 ? (Utf8)this.hitJustification : null);

      this.materiality = in.readString(this.materiality instanceof Utf8 ? (Utf8)this.materiality : null);

      long size0 = in.readArrayStart();
      java.util.List<CharSequence> a0 = this.reason;
      if (a0 == null) {
        a0 = new SpecificData.Array<CharSequence>((int)size0, SCHEMA$.getField("reason").schema());
        this.reason = a0;
      } else a0.clear();
      SpecificData.Array<CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      this.otherReason = in.readString(this.otherReason instanceof Utf8 ? (Utf8)this.otherReason : null);

      this.justification = in.readString(this.justification instanceof Utf8 ? (Utf8)this.justification : null);

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.hitRelevancy = in.readString(this.hitRelevancy instanceof Utf8 ? (Utf8)this.hitRelevancy : null);
          break;

        case 1:
          this.identification = in.readString(this.identification instanceof Utf8 ? (Utf8)this.identification : null);
          break;

        case 2:
          this.hitJustification = in.readString(this.hitJustification instanceof Utf8 ? (Utf8)this.hitJustification : null);
          break;

        case 3:
          this.materiality = in.readString(this.materiality instanceof Utf8 ? (Utf8)this.materiality : null);
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<CharSequence> a0 = this.reason;
          if (a0 == null) {
            a0 = new SpecificData.Array<CharSequence>((int)size0, SCHEMA$.getField("reason").schema());
            this.reason = a0;
          } else a0.clear();
          SpecificData.Array<CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 5:
          this.otherReason = in.readString(this.otherReason instanceof Utf8 ? (Utf8)this.otherReason : null);
          break;

        case 6:
          this.justification = in.readString(this.justification instanceof Utf8 ? (Utf8)this.justification : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










