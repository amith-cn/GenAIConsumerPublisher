/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dbs.clconnbc.api.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class InvestmentAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7830436299098219596L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InvestmentAvro\",\"namespace\":\"com.dbs.clconnbc.api.model\",\"fields\":[{\"name\":\"investmentType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sourceOfWealth\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"pleaseElaborateOnSourceOfWealth\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InvestmentAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InvestmentAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InvestmentAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InvestmentAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InvestmentAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InvestmentAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InvestmentAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InvestmentAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InvestmentAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence investmentType;
  private CharSequence sourceOfWealth;
  private CharSequence pleaseElaborateOnSourceOfWealth;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InvestmentAvro() {}

  /**
   * All-args constructor.
   * @param investmentType The new value for investmentType
   * @param sourceOfWealth The new value for sourceOfWealth
   * @param pleaseElaborateOnSourceOfWealth The new value for pleaseElaborateOnSourceOfWealth
   */
  public InvestmentAvro(CharSequence investmentType, CharSequence sourceOfWealth, CharSequence pleaseElaborateOnSourceOfWealth) {
    this.investmentType = investmentType;
    this.sourceOfWealth = sourceOfWealth;
    this.pleaseElaborateOnSourceOfWealth = pleaseElaborateOnSourceOfWealth;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return investmentType;
    case 1: return sourceOfWealth;
    case 2: return pleaseElaborateOnSourceOfWealth;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: investmentType = (CharSequence)value$; break;
    case 1: sourceOfWealth = (CharSequence)value$; break;
    case 2: pleaseElaborateOnSourceOfWealth = (CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'investmentType' field.
   * @return The value of the 'investmentType' field.
   */
  public CharSequence getInvestmentType() {
    return investmentType;
  }


  /**
   * Sets the value of the 'investmentType' field.
   * @param value the value to set.
   */
  public void setInvestmentType(CharSequence value) {
    this.investmentType = value;
  }

  /**
   * Gets the value of the 'sourceOfWealth' field.
   * @return The value of the 'sourceOfWealth' field.
   */
  public CharSequence getSourceOfWealth() {
    return sourceOfWealth;
  }


  /**
   * Sets the value of the 'sourceOfWealth' field.
   * @param value the value to set.
   */
  public void setSourceOfWealth(CharSequence value) {
    this.sourceOfWealth = value;
  }

  /**
   * Gets the value of the 'pleaseElaborateOnSourceOfWealth' field.
   * @return The value of the 'pleaseElaborateOnSourceOfWealth' field.
   */
  public CharSequence getPleaseElaborateOnSourceOfWealth() {
    return pleaseElaborateOnSourceOfWealth;
  }


  /**
   * Sets the value of the 'pleaseElaborateOnSourceOfWealth' field.
   * @param value the value to set.
   */
  public void setPleaseElaborateOnSourceOfWealth(CharSequence value) {
    this.pleaseElaborateOnSourceOfWealth = value;
  }

  /**
   * Creates a new InvestmentAvro RecordBuilder.
   * @return A new InvestmentAvro RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new InvestmentAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InvestmentAvro RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new InvestmentAvro RecordBuilder by copying an existing InvestmentAvro instance.
   * @param other The existing instance to copy.
   * @return A new InvestmentAvro RecordBuilder
   */
  public static Builder newBuilder(InvestmentAvro other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for InvestmentAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InvestmentAvro>
    implements org.apache.avro.data.RecordBuilder<InvestmentAvro> {

    private CharSequence investmentType;
    private CharSequence sourceOfWealth;
    private CharSequence pleaseElaborateOnSourceOfWealth;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.investmentType)) {
        this.investmentType = data().deepCopy(fields()[0].schema(), other.investmentType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sourceOfWealth)) {
        this.sourceOfWealth = data().deepCopy(fields()[1].schema(), other.sourceOfWealth);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.pleaseElaborateOnSourceOfWealth)) {
        this.pleaseElaborateOnSourceOfWealth = data().deepCopy(fields()[2].schema(), other.pleaseElaborateOnSourceOfWealth);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing InvestmentAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(InvestmentAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.investmentType)) {
        this.investmentType = data().deepCopy(fields()[0].schema(), other.investmentType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sourceOfWealth)) {
        this.sourceOfWealth = data().deepCopy(fields()[1].schema(), other.sourceOfWealth);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pleaseElaborateOnSourceOfWealth)) {
        this.pleaseElaborateOnSourceOfWealth = data().deepCopy(fields()[2].schema(), other.pleaseElaborateOnSourceOfWealth);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'investmentType' field.
      * @return The value.
      */
    public CharSequence getInvestmentType() {
      return investmentType;
    }


    /**
      * Sets the value of the 'investmentType' field.
      * @param value The value of 'investmentType'.
      * @return This builder.
      */
    public Builder setInvestmentType(CharSequence value) {
      validate(fields()[0], value);
      this.investmentType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'investmentType' field has been set.
      * @return True if the 'investmentType' field has been set, false otherwise.
      */
    public boolean hasInvestmentType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'investmentType' field.
      * @return This builder.
      */
    public Builder clearInvestmentType() {
      investmentType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceOfWealth' field.
      * @return The value.
      */
    public CharSequence getSourceOfWealth() {
      return sourceOfWealth;
    }


    /**
      * Sets the value of the 'sourceOfWealth' field.
      * @param value The value of 'sourceOfWealth'.
      * @return This builder.
      */
    public Builder setSourceOfWealth(CharSequence value) {
      validate(fields()[1], value);
      this.sourceOfWealth = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceOfWealth' field has been set.
      * @return True if the 'sourceOfWealth' field has been set, false otherwise.
      */
    public boolean hasSourceOfWealth() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sourceOfWealth' field.
      * @return This builder.
      */
    public Builder clearSourceOfWealth() {
      sourceOfWealth = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pleaseElaborateOnSourceOfWealth' field.
      * @return The value.
      */
    public CharSequence getPleaseElaborateOnSourceOfWealth() {
      return pleaseElaborateOnSourceOfWealth;
    }


    /**
      * Sets the value of the 'pleaseElaborateOnSourceOfWealth' field.
      * @param value The value of 'pleaseElaborateOnSourceOfWealth'.
      * @return This builder.
      */
    public Builder setPleaseElaborateOnSourceOfWealth(CharSequence value) {
      validate(fields()[2], value);
      this.pleaseElaborateOnSourceOfWealth = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pleaseElaborateOnSourceOfWealth' field has been set.
      * @return True if the 'pleaseElaborateOnSourceOfWealth' field has been set, false otherwise.
      */
    public boolean hasPleaseElaborateOnSourceOfWealth() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pleaseElaborateOnSourceOfWealth' field.
      * @return This builder.
      */
    public Builder clearPleaseElaborateOnSourceOfWealth() {
      pleaseElaborateOnSourceOfWealth = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InvestmentAvro build() {
      try {
        InvestmentAvro record = new InvestmentAvro();
        record.investmentType = fieldSetFlags()[0] ? this.investmentType : (CharSequence) defaultValue(fields()[0]);
        record.sourceOfWealth = fieldSetFlags()[1] ? this.sourceOfWealth : (CharSequence) defaultValue(fields()[1]);
        record.pleaseElaborateOnSourceOfWealth = fieldSetFlags()[2] ? this.pleaseElaborateOnSourceOfWealth : (CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InvestmentAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<InvestmentAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InvestmentAvro>
    READER$ = (org.apache.avro.io.DatumReader<InvestmentAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.investmentType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.investmentType);
    }

    if (this.sourceOfWealth == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.sourceOfWealth);
    }

    if (this.pleaseElaborateOnSourceOfWealth == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.pleaseElaborateOnSourceOfWealth);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.investmentType = null;
      } else {
        this.investmentType = in.readString(this.investmentType instanceof Utf8 ? (Utf8)this.investmentType : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sourceOfWealth = null;
      } else {
        this.sourceOfWealth = in.readString(this.sourceOfWealth instanceof Utf8 ? (Utf8)this.sourceOfWealth : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.pleaseElaborateOnSourceOfWealth = null;
      } else {
        this.pleaseElaborateOnSourceOfWealth = in.readString(this.pleaseElaborateOnSourceOfWealth instanceof Utf8 ? (Utf8)this.pleaseElaborateOnSourceOfWealth : null);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.investmentType = null;
          } else {
            this.investmentType = in.readString(this.investmentType instanceof Utf8 ? (Utf8)this.investmentType : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sourceOfWealth = null;
          } else {
            this.sourceOfWealth = in.readString(this.sourceOfWealth instanceof Utf8 ? (Utf8)this.sourceOfWealth : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pleaseElaborateOnSourceOfWealth = null;
          } else {
            this.pleaseElaborateOnSourceOfWealth = in.readString(this.pleaseElaborateOnSourceOfWealth instanceof Utf8 ? (Utf8)this.pleaseElaborateOnSourceOfWealth : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










