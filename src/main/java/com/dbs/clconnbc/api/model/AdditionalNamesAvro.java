/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dbs.clconnbc.api.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AdditionalNamesAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 746511785624166499L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AdditionalNamesAvro\",\"namespace\":\"com.dbs.clconnbc.api.model\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"screening\",\"type\":\"string\"},{\"name\":\"relationshipWithBO\",\"type\":\"string\"},{\"name\":\"BO\",\"type\":\"string\"},{\"name\":\"byGenAI\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AdditionalNamesAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AdditionalNamesAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AdditionalNamesAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AdditionalNamesAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AdditionalNamesAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AdditionalNamesAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AdditionalNamesAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AdditionalNamesAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AdditionalNamesAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence name;
  private CharSequence type;
  private CharSequence screening;
  private CharSequence relationshipWithBO;
  private CharSequence BO;
  private boolean byGenAI;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AdditionalNamesAvro() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param type The new value for type
   * @param screening The new value for screening
   * @param relationshipWithBO The new value for relationshipWithBO
   * @param BO The new value for BO
   * @param byGenAI The new value for byGenAI
   */
  public AdditionalNamesAvro(CharSequence name, CharSequence type, CharSequence screening, CharSequence relationshipWithBO, CharSequence BO, Boolean byGenAI) {
    this.name = name;
    this.type = type;
    this.screening = screening;
    this.relationshipWithBO = relationshipWithBO;
    this.BO = BO;
    this.byGenAI = byGenAI;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return type;
    case 2: return screening;
    case 3: return relationshipWithBO;
    case 4: return BO;
    case 5: return byGenAI;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: name = (CharSequence)value$; break;
    case 1: type = (CharSequence)value$; break;
    case 2: screening = (CharSequence)value$; break;
    case 3: relationshipWithBO = (CharSequence)value$; break;
    case 4: BO = (CharSequence)value$; break;
    case 5: byGenAI = (Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'screening' field.
   * @return The value of the 'screening' field.
   */
  public CharSequence getScreening() {
    return screening;
  }


  /**
   * Sets the value of the 'screening' field.
   * @param value the value to set.
   */
  public void setScreening(CharSequence value) {
    this.screening = value;
  }

  /**
   * Gets the value of the 'relationshipWithBO' field.
   * @return The value of the 'relationshipWithBO' field.
   */
  public CharSequence getRelationshipWithBO() {
    return relationshipWithBO;
  }


  /**
   * Sets the value of the 'relationshipWithBO' field.
   * @param value the value to set.
   */
  public void setRelationshipWithBO(CharSequence value) {
    this.relationshipWithBO = value;
  }

  /**
   * Gets the value of the 'BO' field.
   * @return The value of the 'BO' field.
   */
  public CharSequence getBO() {
    return BO;
  }


  /**
   * Sets the value of the 'BO' field.
   * @param value the value to set.
   */
  public void setBO(CharSequence value) {
    this.BO = value;
  }

  /**
   * Gets the value of the 'byGenAI' field.
   * @return The value of the 'byGenAI' field.
   */
  public boolean getByGenAI() {
    return byGenAI;
  }


  /**
   * Sets the value of the 'byGenAI' field.
   * @param value the value to set.
   */
  public void setByGenAI(boolean value) {
    this.byGenAI = value;
  }

  /**
   * Creates a new AdditionalNamesAvro RecordBuilder.
   * @return A new AdditionalNamesAvro RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new AdditionalNamesAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AdditionalNamesAvro RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new AdditionalNamesAvro RecordBuilder by copying an existing AdditionalNamesAvro instance.
   * @param other The existing instance to copy.
   * @return A new AdditionalNamesAvro RecordBuilder
   */
  public static Builder newBuilder(AdditionalNamesAvro other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for AdditionalNamesAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AdditionalNamesAvro>
    implements org.apache.avro.data.RecordBuilder<AdditionalNamesAvro> {

    private CharSequence name;
    private CharSequence type;
    private CharSequence screening;
    private CharSequence relationshipWithBO;
    private CharSequence BO;
    private boolean byGenAI;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.screening)) {
        this.screening = data().deepCopy(fields()[2].schema(), other.screening);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.relationshipWithBO)) {
        this.relationshipWithBO = data().deepCopy(fields()[3].schema(), other.relationshipWithBO);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.BO)) {
        this.BO = data().deepCopy(fields()[4].schema(), other.BO);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.byGenAI)) {
        this.byGenAI = data().deepCopy(fields()[5].schema(), other.byGenAI);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing AdditionalNamesAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(AdditionalNamesAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.screening)) {
        this.screening = data().deepCopy(fields()[2].schema(), other.screening);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.relationshipWithBO)) {
        this.relationshipWithBO = data().deepCopy(fields()[3].schema(), other.relationshipWithBO);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.BO)) {
        this.BO = data().deepCopy(fields()[4].schema(), other.BO);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.byGenAI)) {
        this.byGenAI = data().deepCopy(fields()[5].schema(), other.byGenAI);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public Builder setName(CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public Builder setType(CharSequence value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'screening' field.
      * @return The value.
      */
    public CharSequence getScreening() {
      return screening;
    }


    /**
      * Sets the value of the 'screening' field.
      * @param value The value of 'screening'.
      * @return This builder.
      */
    public Builder setScreening(CharSequence value) {
      validate(fields()[2], value);
      this.screening = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'screening' field has been set.
      * @return True if the 'screening' field has been set, false otherwise.
      */
    public boolean hasScreening() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'screening' field.
      * @return This builder.
      */
    public Builder clearScreening() {
      screening = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'relationshipWithBO' field.
      * @return The value.
      */
    public CharSequence getRelationshipWithBO() {
      return relationshipWithBO;
    }


    /**
      * Sets the value of the 'relationshipWithBO' field.
      * @param value The value of 'relationshipWithBO'.
      * @return This builder.
      */
    public Builder setRelationshipWithBO(CharSequence value) {
      validate(fields()[3], value);
      this.relationshipWithBO = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'relationshipWithBO' field has been set.
      * @return True if the 'relationshipWithBO' field has been set, false otherwise.
      */
    public boolean hasRelationshipWithBO() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'relationshipWithBO' field.
      * @return This builder.
      */
    public Builder clearRelationshipWithBO() {
      relationshipWithBO = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'BO' field.
      * @return The value.
      */
    public CharSequence getBO() {
      return BO;
    }


    /**
      * Sets the value of the 'BO' field.
      * @param value The value of 'BO'.
      * @return This builder.
      */
    public Builder setBO(CharSequence value) {
      validate(fields()[4], value);
      this.BO = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'BO' field has been set.
      * @return True if the 'BO' field has been set, false otherwise.
      */
    public boolean hasBO() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'BO' field.
      * @return This builder.
      */
    public Builder clearBO() {
      BO = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'byGenAI' field.
      * @return The value.
      */
    public boolean getByGenAI() {
      return byGenAI;
    }


    /**
      * Sets the value of the 'byGenAI' field.
      * @param value The value of 'byGenAI'.
      * @return This builder.
      */
    public Builder setByGenAI(boolean value) {
      validate(fields()[5], value);
      this.byGenAI = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'byGenAI' field has been set.
      * @return True if the 'byGenAI' field has been set, false otherwise.
      */
    public boolean hasByGenAI() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'byGenAI' field.
      * @return This builder.
      */
    public Builder clearByGenAI() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AdditionalNamesAvro build() {
      try {
        AdditionalNamesAvro record = new AdditionalNamesAvro();
        record.name = fieldSetFlags()[0] ? this.name : (CharSequence) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (CharSequence) defaultValue(fields()[1]);
        record.screening = fieldSetFlags()[2] ? this.screening : (CharSequence) defaultValue(fields()[2]);
        record.relationshipWithBO = fieldSetFlags()[3] ? this.relationshipWithBO : (CharSequence) defaultValue(fields()[3]);
        record.BO = fieldSetFlags()[4] ? this.BO : (CharSequence) defaultValue(fields()[4]);
        record.byGenAI = fieldSetFlags()[5] ? this.byGenAI : (Boolean) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AdditionalNamesAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<AdditionalNamesAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AdditionalNamesAvro>
    READER$ = (org.apache.avro.io.DatumReader<AdditionalNamesAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    out.writeString(this.type);

    out.writeString(this.screening);

    out.writeString(this.relationshipWithBO);

    out.writeString(this.BO);

    out.writeBoolean(this.byGenAI);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.screening = in.readString(this.screening instanceof Utf8 ? (Utf8)this.screening : null);

      this.relationshipWithBO = in.readString(this.relationshipWithBO instanceof Utf8 ? (Utf8)this.relationshipWithBO : null);

      this.BO = in.readString(this.BO instanceof Utf8 ? (Utf8)this.BO : null);

      this.byGenAI = in.readBoolean();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 1:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 2:
          this.screening = in.readString(this.screening instanceof Utf8 ? (Utf8)this.screening : null);
          break;

        case 3:
          this.relationshipWithBO = in.readString(this.relationshipWithBO instanceof Utf8 ? (Utf8)this.relationshipWithBO : null);
          break;

        case 4:
          this.BO = in.readString(this.BO instanceof Utf8 ? (Utf8)this.BO : null);
          break;

        case 5:
          this.byGenAI = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










