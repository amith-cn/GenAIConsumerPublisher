/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dbs.clconnbc.api.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class KafkaRequestAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7178788596490931979L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KafkaRequestAvro\",\"namespace\":\"com.dbs.clconnbc.api.model\",\"fields\":[{\"name\":\"caseId\",\"type\":\"string\"},{\"name\":\"personId\",\"type\":\"string\"},{\"name\":\"riskcheckId\",\"type\":\"string\"},{\"name\":\"screeningHitId\",\"type\":\"string\"},{\"name\":\"screenedName\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"hitId\",\"type\":\"string\"},{\"name\":\"hitUrl\",\"type\":\"string\"},{\"name\":\"rmLocation\",\"type\":\"string\"},{\"name\":\"bookingCentre\",\"type\":\"string\"},{\"name\":\"additionalDetails\",\"type\":{\"type\":\"record\",\"name\":\"AdditionalDetailsAvro\",\"fields\":[{\"name\":\"nationality\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gender\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"dateOfBirth\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"identificationNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"countryOfIncorporation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"dateOfIncorporation\",\"type\":[\"null\",\"string\"],\"default\":null}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<KafkaRequestAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<KafkaRequestAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<KafkaRequestAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<KafkaRequestAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<KafkaRequestAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this KafkaRequestAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a KafkaRequestAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a KafkaRequestAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static KafkaRequestAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence caseId;
  private CharSequence personId;
  private CharSequence riskcheckId;
  private CharSequence screeningHitId;
  private CharSequence screenedName;
  private CharSequence type;
  private CharSequence hitId;
  private CharSequence hitUrl;
  private CharSequence rmLocation;
  private CharSequence bookingCentre;
  private AdditionalDetailsAvro additionalDetails;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KafkaRequestAvro() {}

  /**
   * All-args constructor.
   * @param caseId The new value for caseId
   * @param personId The new value for personId
   * @param riskcheckId The new value for riskcheckId
   * @param screeningHitId The new value for screeningHitId
   * @param screenedName The new value for screenedName
   * @param type The new value for type
   * @param hitId The new value for hitId
   * @param hitUrl The new value for hitUrl
   * @param rmLocation The new value for rmLocation
   * @param bookingCentre The new value for bookingCentre
   * @param additionalDetails The new value for additionalDetails
   */
  public KafkaRequestAvro(CharSequence caseId, CharSequence personId, CharSequence riskcheckId, CharSequence screeningHitId, CharSequence screenedName, CharSequence type, CharSequence hitId, CharSequence hitUrl, CharSequence rmLocation, CharSequence bookingCentre, AdditionalDetailsAvro additionalDetails) {
    this.caseId = caseId;
    this.personId = personId;
    this.riskcheckId = riskcheckId;
    this.screeningHitId = screeningHitId;
    this.screenedName = screenedName;
    this.type = type;
    this.hitId = hitId;
    this.hitUrl = hitUrl;
    this.rmLocation = rmLocation;
    this.bookingCentre = bookingCentre;
    this.additionalDetails = additionalDetails;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return caseId;
    case 1: return personId;
    case 2: return riskcheckId;
    case 3: return screeningHitId;
    case 4: return screenedName;
    case 5: return type;
    case 6: return hitId;
    case 7: return hitUrl;
    case 8: return rmLocation;
    case 9: return bookingCentre;
    case 10: return additionalDetails;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: caseId = (CharSequence)value$; break;
    case 1: personId = (CharSequence)value$; break;
    case 2: riskcheckId = (CharSequence)value$; break;
    case 3: screeningHitId = (CharSequence)value$; break;
    case 4: screenedName = (CharSequence)value$; break;
    case 5: type = (CharSequence)value$; break;
    case 6: hitId = (CharSequence)value$; break;
    case 7: hitUrl = (CharSequence)value$; break;
    case 8: rmLocation = (CharSequence)value$; break;
    case 9: bookingCentre = (CharSequence)value$; break;
    case 10: additionalDetails = (AdditionalDetailsAvro)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'caseId' field.
   * @return The value of the 'caseId' field.
   */
  public CharSequence getCaseId() {
    return caseId;
  }


  /**
   * Sets the value of the 'caseId' field.
   * @param value the value to set.
   */
  public void setCaseId(CharSequence value) {
    this.caseId = value;
  }

  /**
   * Gets the value of the 'personId' field.
   * @return The value of the 'personId' field.
   */
  public CharSequence getPersonId() {
    return personId;
  }


  /**
   * Sets the value of the 'personId' field.
   * @param value the value to set.
   */
  public void setPersonId(CharSequence value) {
    this.personId = value;
  }

  /**
   * Gets the value of the 'riskcheckId' field.
   * @return The value of the 'riskcheckId' field.
   */
  public CharSequence getRiskcheckId() {
    return riskcheckId;
  }


  /**
   * Sets the value of the 'riskcheckId' field.
   * @param value the value to set.
   */
  public void setRiskcheckId(CharSequence value) {
    this.riskcheckId = value;
  }

  /**
   * Gets the value of the 'screeningHitId' field.
   * @return The value of the 'screeningHitId' field.
   */
  public CharSequence getScreeningHitId() {
    return screeningHitId;
  }


  /**
   * Sets the value of the 'screeningHitId' field.
   * @param value the value to set.
   */
  public void setScreeningHitId(CharSequence value) {
    this.screeningHitId = value;
  }

  /**
   * Gets the value of the 'screenedName' field.
   * @return The value of the 'screenedName' field.
   */
  public CharSequence getScreenedName() {
    return screenedName;
  }


  /**
   * Sets the value of the 'screenedName' field.
   * @param value the value to set.
   */
  public void setScreenedName(CharSequence value) {
    this.screenedName = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'hitId' field.
   * @return The value of the 'hitId' field.
   */
  public CharSequence getHitId() {
    return hitId;
  }


  /**
   * Sets the value of the 'hitId' field.
   * @param value the value to set.
   */
  public void setHitId(CharSequence value) {
    this.hitId = value;
  }

  /**
   * Gets the value of the 'hitUrl' field.
   * @return The value of the 'hitUrl' field.
   */
  public CharSequence getHitUrl() {
    return hitUrl;
  }


  /**
   * Sets the value of the 'hitUrl' field.
   * @param value the value to set.
   */
  public void setHitUrl(CharSequence value) {
    this.hitUrl = value;
  }

  /**
   * Gets the value of the 'rmLocation' field.
   * @return The value of the 'rmLocation' field.
   */
  public CharSequence getRmLocation() {
    return rmLocation;
  }


  /**
   * Sets the value of the 'rmLocation' field.
   * @param value the value to set.
   */
  public void setRmLocation(CharSequence value) {
    this.rmLocation = value;
  }

  /**
   * Gets the value of the 'bookingCentre' field.
   * @return The value of the 'bookingCentre' field.
   */
  public CharSequence getBookingCentre() {
    return bookingCentre;
  }


  /**
   * Sets the value of the 'bookingCentre' field.
   * @param value the value to set.
   */
  public void setBookingCentre(CharSequence value) {
    this.bookingCentre = value;
  }

  /**
   * Gets the value of the 'additionalDetails' field.
   * @return The value of the 'additionalDetails' field.
   */
  public AdditionalDetailsAvro getAdditionalDetails() {
    return additionalDetails;
  }


  /**
   * Sets the value of the 'additionalDetails' field.
   * @param value the value to set.
   */
  public void setAdditionalDetails(AdditionalDetailsAvro value) {
    this.additionalDetails = value;
  }

  /**
   * Creates a new KafkaRequestAvro RecordBuilder.
   * @return A new KafkaRequestAvro RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new KafkaRequestAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KafkaRequestAvro RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new KafkaRequestAvro RecordBuilder by copying an existing KafkaRequestAvro instance.
   * @param other The existing instance to copy.
   * @return A new KafkaRequestAvro RecordBuilder
   */
  public static Builder newBuilder(KafkaRequestAvro other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for KafkaRequestAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KafkaRequestAvro>
    implements org.apache.avro.data.RecordBuilder<KafkaRequestAvro> {

    private CharSequence caseId;
    private CharSequence personId;
    private CharSequence riskcheckId;
    private CharSequence screeningHitId;
    private CharSequence screenedName;
    private CharSequence type;
    private CharSequence hitId;
    private CharSequence hitUrl;
    private CharSequence rmLocation;
    private CharSequence bookingCentre;
    private AdditionalDetailsAvro additionalDetails;
    private AdditionalDetailsAvro.Builder additionalDetailsBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.caseId)) {
        this.caseId = data().deepCopy(fields()[0].schema(), other.caseId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.personId)) {
        this.personId = data().deepCopy(fields()[1].schema(), other.personId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.riskcheckId)) {
        this.riskcheckId = data().deepCopy(fields()[2].schema(), other.riskcheckId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.screeningHitId)) {
        this.screeningHitId = data().deepCopy(fields()[3].schema(), other.screeningHitId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.screenedName)) {
        this.screenedName = data().deepCopy(fields()[4].schema(), other.screenedName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.hitId)) {
        this.hitId = data().deepCopy(fields()[6].schema(), other.hitId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.hitUrl)) {
        this.hitUrl = data().deepCopy(fields()[7].schema(), other.hitUrl);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.rmLocation)) {
        this.rmLocation = data().deepCopy(fields()[8].schema(), other.rmLocation);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.bookingCentre)) {
        this.bookingCentre = data().deepCopy(fields()[9].schema(), other.bookingCentre);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.additionalDetails)) {
        this.additionalDetails = data().deepCopy(fields()[10].schema(), other.additionalDetails);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (other.hasAdditionalDetailsBuilder()) {
        this.additionalDetailsBuilder = AdditionalDetailsAvro.newBuilder(other.getAdditionalDetailsBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing KafkaRequestAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(KafkaRequestAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.caseId)) {
        this.caseId = data().deepCopy(fields()[0].schema(), other.caseId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.personId)) {
        this.personId = data().deepCopy(fields()[1].schema(), other.personId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.riskcheckId)) {
        this.riskcheckId = data().deepCopy(fields()[2].schema(), other.riskcheckId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.screeningHitId)) {
        this.screeningHitId = data().deepCopy(fields()[3].schema(), other.screeningHitId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.screenedName)) {
        this.screenedName = data().deepCopy(fields()[4].schema(), other.screenedName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hitId)) {
        this.hitId = data().deepCopy(fields()[6].schema(), other.hitId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.hitUrl)) {
        this.hitUrl = data().deepCopy(fields()[7].schema(), other.hitUrl);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.rmLocation)) {
        this.rmLocation = data().deepCopy(fields()[8].schema(), other.rmLocation);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bookingCentre)) {
        this.bookingCentre = data().deepCopy(fields()[9].schema(), other.bookingCentre);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.additionalDetails)) {
        this.additionalDetails = data().deepCopy(fields()[10].schema(), other.additionalDetails);
        fieldSetFlags()[10] = true;
      }
      this.additionalDetailsBuilder = null;
    }

    /**
      * Gets the value of the 'caseId' field.
      * @return The value.
      */
    public CharSequence getCaseId() {
      return caseId;
    }


    /**
      * Sets the value of the 'caseId' field.
      * @param value The value of 'caseId'.
      * @return This builder.
      */
    public Builder setCaseId(CharSequence value) {
      validate(fields()[0], value);
      this.caseId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'caseId' field has been set.
      * @return True if the 'caseId' field has been set, false otherwise.
      */
    public boolean hasCaseId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'caseId' field.
      * @return This builder.
      */
    public Builder clearCaseId() {
      caseId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'personId' field.
      * @return The value.
      */
    public CharSequence getPersonId() {
      return personId;
    }


    /**
      * Sets the value of the 'personId' field.
      * @param value The value of 'personId'.
      * @return This builder.
      */
    public Builder setPersonId(CharSequence value) {
      validate(fields()[1], value);
      this.personId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'personId' field has been set.
      * @return True if the 'personId' field has been set, false otherwise.
      */
    public boolean hasPersonId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'personId' field.
      * @return This builder.
      */
    public Builder clearPersonId() {
      personId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'riskcheckId' field.
      * @return The value.
      */
    public CharSequence getRiskcheckId() {
      return riskcheckId;
    }


    /**
      * Sets the value of the 'riskcheckId' field.
      * @param value The value of 'riskcheckId'.
      * @return This builder.
      */
    public Builder setRiskcheckId(CharSequence value) {
      validate(fields()[2], value);
      this.riskcheckId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'riskcheckId' field has been set.
      * @return True if the 'riskcheckId' field has been set, false otherwise.
      */
    public boolean hasRiskcheckId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'riskcheckId' field.
      * @return This builder.
      */
    public Builder clearRiskcheckId() {
      riskcheckId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'screeningHitId' field.
      * @return The value.
      */
    public CharSequence getScreeningHitId() {
      return screeningHitId;
    }


    /**
      * Sets the value of the 'screeningHitId' field.
      * @param value The value of 'screeningHitId'.
      * @return This builder.
      */
    public Builder setScreeningHitId(CharSequence value) {
      validate(fields()[3], value);
      this.screeningHitId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'screeningHitId' field has been set.
      * @return True if the 'screeningHitId' field has been set, false otherwise.
      */
    public boolean hasScreeningHitId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'screeningHitId' field.
      * @return This builder.
      */
    public Builder clearScreeningHitId() {
      screeningHitId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'screenedName' field.
      * @return The value.
      */
    public CharSequence getScreenedName() {
      return screenedName;
    }


    /**
      * Sets the value of the 'screenedName' field.
      * @param value The value of 'screenedName'.
      * @return This builder.
      */
    public Builder setScreenedName(CharSequence value) {
      validate(fields()[4], value);
      this.screenedName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'screenedName' field has been set.
      * @return True if the 'screenedName' field has been set, false otherwise.
      */
    public boolean hasScreenedName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'screenedName' field.
      * @return This builder.
      */
    public Builder clearScreenedName() {
      screenedName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public Builder setType(CharSequence value) {
      validate(fields()[5], value);
      this.type = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public Builder clearType() {
      type = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'hitId' field.
      * @return The value.
      */
    public CharSequence getHitId() {
      return hitId;
    }


    /**
      * Sets the value of the 'hitId' field.
      * @param value The value of 'hitId'.
      * @return This builder.
      */
    public Builder setHitId(CharSequence value) {
      validate(fields()[6], value);
      this.hitId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'hitId' field has been set.
      * @return True if the 'hitId' field has been set, false otherwise.
      */
    public boolean hasHitId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'hitId' field.
      * @return This builder.
      */
    public Builder clearHitId() {
      hitId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'hitUrl' field.
      * @return The value.
      */
    public CharSequence getHitUrl() {
      return hitUrl;
    }


    /**
      * Sets the value of the 'hitUrl' field.
      * @param value The value of 'hitUrl'.
      * @return This builder.
      */
    public Builder setHitUrl(CharSequence value) {
      validate(fields()[7], value);
      this.hitUrl = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'hitUrl' field has been set.
      * @return True if the 'hitUrl' field has been set, false otherwise.
      */
    public boolean hasHitUrl() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'hitUrl' field.
      * @return This builder.
      */
    public Builder clearHitUrl() {
      hitUrl = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'rmLocation' field.
      * @return The value.
      */
    public CharSequence getRmLocation() {
      return rmLocation;
    }


    /**
      * Sets the value of the 'rmLocation' field.
      * @param value The value of 'rmLocation'.
      * @return This builder.
      */
    public Builder setRmLocation(CharSequence value) {
      validate(fields()[8], value);
      this.rmLocation = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'rmLocation' field has been set.
      * @return True if the 'rmLocation' field has been set, false otherwise.
      */
    public boolean hasRmLocation() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'rmLocation' field.
      * @return This builder.
      */
    public Builder clearRmLocation() {
      rmLocation = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookingCentre' field.
      * @return The value.
      */
    public CharSequence getBookingCentre() {
      return bookingCentre;
    }


    /**
      * Sets the value of the 'bookingCentre' field.
      * @param value The value of 'bookingCentre'.
      * @return This builder.
      */
    public Builder setBookingCentre(CharSequence value) {
      validate(fields()[9], value);
      this.bookingCentre = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'bookingCentre' field has been set.
      * @return True if the 'bookingCentre' field has been set, false otherwise.
      */
    public boolean hasBookingCentre() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'bookingCentre' field.
      * @return This builder.
      */
    public Builder clearBookingCentre() {
      bookingCentre = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'additionalDetails' field.
      * @return The value.
      */
    public AdditionalDetailsAvro getAdditionalDetails() {
      return additionalDetails;
    }


    /**
      * Sets the value of the 'additionalDetails' field.
      * @param value The value of 'additionalDetails'.
      * @return This builder.
      */
    public Builder setAdditionalDetails(AdditionalDetailsAvro value) {
      validate(fields()[10], value);
      this.additionalDetailsBuilder = null;
      this.additionalDetails = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'additionalDetails' field has been set.
      * @return True if the 'additionalDetails' field has been set, false otherwise.
      */
    public boolean hasAdditionalDetails() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'additionalDetails' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public AdditionalDetailsAvro.Builder getAdditionalDetailsBuilder() {
      if (additionalDetailsBuilder == null) {
        if (hasAdditionalDetails()) {
          setAdditionalDetailsBuilder(AdditionalDetailsAvro.newBuilder(additionalDetails));
        } else {
          setAdditionalDetailsBuilder(AdditionalDetailsAvro.newBuilder());
        }
      }
      return additionalDetailsBuilder;
    }

    /**
     * Sets the Builder instance for the 'additionalDetails' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Builder setAdditionalDetailsBuilder(AdditionalDetailsAvro.Builder value) {
      clearAdditionalDetails();
      additionalDetailsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'additionalDetails' field has an active Builder instance
     * @return True if the 'additionalDetails' field has an active Builder instance
     */
    public boolean hasAdditionalDetailsBuilder() {
      return additionalDetailsBuilder != null;
    }

    /**
      * Clears the value of the 'additionalDetails' field.
      * @return This builder.
      */
    public Builder clearAdditionalDetails() {
      additionalDetails = null;
      additionalDetailsBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public KafkaRequestAvro build() {
      try {
        KafkaRequestAvro record = new KafkaRequestAvro();
        record.caseId = fieldSetFlags()[0] ? this.caseId : (CharSequence) defaultValue(fields()[0]);
        record.personId = fieldSetFlags()[1] ? this.personId : (CharSequence) defaultValue(fields()[1]);
        record.riskcheckId = fieldSetFlags()[2] ? this.riskcheckId : (CharSequence) defaultValue(fields()[2]);
        record.screeningHitId = fieldSetFlags()[3] ? this.screeningHitId : (CharSequence) defaultValue(fields()[3]);
        record.screenedName = fieldSetFlags()[4] ? this.screenedName : (CharSequence) defaultValue(fields()[4]);
        record.type = fieldSetFlags()[5] ? this.type : (CharSequence) defaultValue(fields()[5]);
        record.hitId = fieldSetFlags()[6] ? this.hitId : (CharSequence) defaultValue(fields()[6]);
        record.hitUrl = fieldSetFlags()[7] ? this.hitUrl : (CharSequence) defaultValue(fields()[7]);
        record.rmLocation = fieldSetFlags()[8] ? this.rmLocation : (CharSequence) defaultValue(fields()[8]);
        record.bookingCentre = fieldSetFlags()[9] ? this.bookingCentre : (CharSequence) defaultValue(fields()[9]);
        if (additionalDetailsBuilder != null) {
          try {
            record.additionalDetails = this.additionalDetailsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("additionalDetails"));
            throw e;
          }
        } else {
          record.additionalDetails = fieldSetFlags()[10] ? this.additionalDetails : (AdditionalDetailsAvro) defaultValue(fields()[10]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<KafkaRequestAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<KafkaRequestAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<KafkaRequestAvro>
    READER$ = (org.apache.avro.io.DatumReader<KafkaRequestAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.caseId);

    out.writeString(this.personId);

    out.writeString(this.riskcheckId);

    out.writeString(this.screeningHitId);

    out.writeString(this.screenedName);

    out.writeString(this.type);

    out.writeString(this.hitId);

    out.writeString(this.hitUrl);

    out.writeString(this.rmLocation);

    out.writeString(this.bookingCentre);

    this.additionalDetails.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.caseId = in.readString(this.caseId instanceof Utf8 ? (Utf8)this.caseId : null);

      this.personId = in.readString(this.personId instanceof Utf8 ? (Utf8)this.personId : null);

      this.riskcheckId = in.readString(this.riskcheckId instanceof Utf8 ? (Utf8)this.riskcheckId : null);

      this.screeningHitId = in.readString(this.screeningHitId instanceof Utf8 ? (Utf8)this.screeningHitId : null);

      this.screenedName = in.readString(this.screenedName instanceof Utf8 ? (Utf8)this.screenedName : null);

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.hitId = in.readString(this.hitId instanceof Utf8 ? (Utf8)this.hitId : null);

      this.hitUrl = in.readString(this.hitUrl instanceof Utf8 ? (Utf8)this.hitUrl : null);

      this.rmLocation = in.readString(this.rmLocation instanceof Utf8 ? (Utf8)this.rmLocation : null);

      this.bookingCentre = in.readString(this.bookingCentre instanceof Utf8 ? (Utf8)this.bookingCentre : null);

      if (this.additionalDetails == null) {
        this.additionalDetails = new AdditionalDetailsAvro();
      }
      this.additionalDetails.customDecode(in);

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.caseId = in.readString(this.caseId instanceof Utf8 ? (Utf8)this.caseId : null);
          break;

        case 1:
          this.personId = in.readString(this.personId instanceof Utf8 ? (Utf8)this.personId : null);
          break;

        case 2:
          this.riskcheckId = in.readString(this.riskcheckId instanceof Utf8 ? (Utf8)this.riskcheckId : null);
          break;

        case 3:
          this.screeningHitId = in.readString(this.screeningHitId instanceof Utf8 ? (Utf8)this.screeningHitId : null);
          break;

        case 4:
          this.screenedName = in.readString(this.screenedName instanceof Utf8 ? (Utf8)this.screenedName : null);
          break;

        case 5:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 6:
          this.hitId = in.readString(this.hitId instanceof Utf8 ? (Utf8)this.hitId : null);
          break;

        case 7:
          this.hitUrl = in.readString(this.hitUrl instanceof Utf8 ? (Utf8)this.hitUrl : null);
          break;

        case 8:
          this.rmLocation = in.readString(this.rmLocation instanceof Utf8 ? (Utf8)this.rmLocation : null);
          break;

        case 9:
          this.bookingCentre = in.readString(this.bookingCentre instanceof Utf8 ? (Utf8)this.bookingCentre : null);
          break;

        case 10:
          if (this.additionalDetails == null) {
            this.additionalDetails = new AdditionalDetailsAvro();
          }
          this.additionalDetails.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










