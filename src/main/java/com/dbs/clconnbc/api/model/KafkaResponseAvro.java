/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dbs.clconnbc.api.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class KafkaResponseAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6906398018512703504L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KafkaResponseAvro\",\"namespace\":\"com.dbs.clconnbc.api.model\",\"fields\":[{\"name\":\"caseId\",\"type\":\"string\"},{\"name\":\"personId\",\"type\":\"string\"},{\"name\":\"riskcheckId\",\"type\":\"string\"},{\"name\":\"screeningHitId\",\"type\":\"string\"},{\"name\":\"hitId\",\"type\":\"string\"},{\"name\":\"hitUrl\",\"type\":\"string\"},{\"name\":\"rmLocation\",\"type\":\"string\"},{\"name\":\"bookingCentre\",\"type\":\"string\"},{\"name\":\"errorString\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"rawContent\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"isSummaryGenerated\",\"type\":\"boolean\",\"default\":false},{\"name\":\"genAiSummary\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"isQualificationGenerated\",\"type\":\"boolean\",\"default\":false},{\"name\":\"qualification\",\"type\":{\"type\":\"record\",\"name\":\"QualificationAvro\",\"fields\":[{\"name\":\"hitRelevancy\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"identification\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"hitJustification\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"materiality\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"reason\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]},{\"name\":\"otherReason\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"justification\",\"type\":\"string\",\"default\":\"\"}]},\"default\":{\"hitRelevancy\":\"\",\"identification\":\"\",\"hitJustification\":\"\",\"materiality\":\"\",\"reason\":[],\"otherReason\":\"\",\"justification\":\"\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<KafkaResponseAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<KafkaResponseAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<KafkaResponseAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<KafkaResponseAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<KafkaResponseAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this KafkaResponseAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a KafkaResponseAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a KafkaResponseAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static KafkaResponseAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence caseId;
  private CharSequence personId;
  private CharSequence riskcheckId;
  private CharSequence screeningHitId;
  private CharSequence hitId;
  private CharSequence hitUrl;
  private CharSequence rmLocation;
  private CharSequence bookingCentre;
  private CharSequence errorString;
  private CharSequence rawContent;
  private boolean isSummaryGenerated;
  private CharSequence genAiSummary;
  private boolean isQualificationGenerated;
  private QualificationAvro qualification;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KafkaResponseAvro() {}

  /**
   * All-args constructor.
   * @param caseId The new value for caseId
   * @param personId The new value for personId
   * @param riskcheckId The new value for riskcheckId
   * @param screeningHitId The new value for screeningHitId
   * @param hitId The new value for hitId
   * @param hitUrl The new value for hitUrl
   * @param rmLocation The new value for rmLocation
   * @param bookingCentre The new value for bookingCentre
   * @param errorString The new value for errorString
   * @param rawContent The new value for rawContent
   * @param isSummaryGenerated The new value for isSummaryGenerated
   * @param genAiSummary The new value for genAiSummary
   * @param isQualificationGenerated The new value for isQualificationGenerated
   * @param qualification The new value for qualification
   */
  public KafkaResponseAvro(CharSequence caseId, CharSequence personId, CharSequence riskcheckId, CharSequence screeningHitId, CharSequence hitId, CharSequence hitUrl, CharSequence rmLocation, CharSequence bookingCentre, CharSequence errorString, CharSequence rawContent, Boolean isSummaryGenerated, CharSequence genAiSummary, Boolean isQualificationGenerated, QualificationAvro qualification) {
    this.caseId = caseId;
    this.personId = personId;
    this.riskcheckId = riskcheckId;
    this.screeningHitId = screeningHitId;
    this.hitId = hitId;
    this.hitUrl = hitUrl;
    this.rmLocation = rmLocation;
    this.bookingCentre = bookingCentre;
    this.errorString = errorString;
    this.rawContent = rawContent;
    this.isSummaryGenerated = isSummaryGenerated;
    this.genAiSummary = genAiSummary;
    this.isQualificationGenerated = isQualificationGenerated;
    this.qualification = qualification;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return caseId;
    case 1: return personId;
    case 2: return riskcheckId;
    case 3: return screeningHitId;
    case 4: return hitId;
    case 5: return hitUrl;
    case 6: return rmLocation;
    case 7: return bookingCentre;
    case 8: return errorString;
    case 9: return rawContent;
    case 10: return isSummaryGenerated;
    case 11: return genAiSummary;
    case 12: return isQualificationGenerated;
    case 13: return qualification;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: caseId = (CharSequence)value$; break;
    case 1: personId = (CharSequence)value$; break;
    case 2: riskcheckId = (CharSequence)value$; break;
    case 3: screeningHitId = (CharSequence)value$; break;
    case 4: hitId = (CharSequence)value$; break;
    case 5: hitUrl = (CharSequence)value$; break;
    case 6: rmLocation = (CharSequence)value$; break;
    case 7: bookingCentre = (CharSequence)value$; break;
    case 8: errorString = (CharSequence)value$; break;
    case 9: rawContent = (CharSequence)value$; break;
    case 10: isSummaryGenerated = (Boolean)value$; break;
    case 11: genAiSummary = (CharSequence)value$; break;
    case 12: isQualificationGenerated = (Boolean)value$; break;
    case 13: qualification = (QualificationAvro)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'caseId' field.
   * @return The value of the 'caseId' field.
   */
  public CharSequence getCaseId() {
    return caseId;
  }


  /**
   * Sets the value of the 'caseId' field.
   * @param value the value to set.
   */
  public void setCaseId(CharSequence value) {
    this.caseId = value;
  }

  /**
   * Gets the value of the 'personId' field.
   * @return The value of the 'personId' field.
   */
  public CharSequence getPersonId() {
    return personId;
  }


  /**
   * Sets the value of the 'personId' field.
   * @param value the value to set.
   */
  public void setPersonId(CharSequence value) {
    this.personId = value;
  }

  /**
   * Gets the value of the 'riskcheckId' field.
   * @return The value of the 'riskcheckId' field.
   */
  public CharSequence getRiskcheckId() {
    return riskcheckId;
  }


  /**
   * Sets the value of the 'riskcheckId' field.
   * @param value the value to set.
   */
  public void setRiskcheckId(CharSequence value) {
    this.riskcheckId = value;
  }

  /**
   * Gets the value of the 'screeningHitId' field.
   * @return The value of the 'screeningHitId' field.
   */
  public CharSequence getScreeningHitId() {
    return screeningHitId;
  }


  /**
   * Sets the value of the 'screeningHitId' field.
   * @param value the value to set.
   */
  public void setScreeningHitId(CharSequence value) {
    this.screeningHitId = value;
  }

  /**
   * Gets the value of the 'hitId' field.
   * @return The value of the 'hitId' field.
   */
  public CharSequence getHitId() {
    return hitId;
  }


  /**
   * Sets the value of the 'hitId' field.
   * @param value the value to set.
   */
  public void setHitId(CharSequence value) {
    this.hitId = value;
  }

  /**
   * Gets the value of the 'hitUrl' field.
   * @return The value of the 'hitUrl' field.
   */
  public CharSequence getHitUrl() {
    return hitUrl;
  }


  /**
   * Sets the value of the 'hitUrl' field.
   * @param value the value to set.
   */
  public void setHitUrl(CharSequence value) {
    this.hitUrl = value;
  }

  /**
   * Gets the value of the 'rmLocation' field.
   * @return The value of the 'rmLocation' field.
   */
  public CharSequence getRmLocation() {
    return rmLocation;
  }


  /**
   * Sets the value of the 'rmLocation' field.
   * @param value the value to set.
   */
  public void setRmLocation(CharSequence value) {
    this.rmLocation = value;
  }

  /**
   * Gets the value of the 'bookingCentre' field.
   * @return The value of the 'bookingCentre' field.
   */
  public CharSequence getBookingCentre() {
    return bookingCentre;
  }


  /**
   * Sets the value of the 'bookingCentre' field.
   * @param value the value to set.
   */
  public void setBookingCentre(CharSequence value) {
    this.bookingCentre = value;
  }

  /**
   * Gets the value of the 'errorString' field.
   * @return The value of the 'errorString' field.
   */
  public CharSequence getErrorString() {
    return errorString;
  }


  /**
   * Sets the value of the 'errorString' field.
   * @param value the value to set.
   */
  public void setErrorString(CharSequence value) {
    this.errorString = value;
  }

  /**
   * Gets the value of the 'rawContent' field.
   * @return The value of the 'rawContent' field.
   */
  public CharSequence getRawContent() {
    return rawContent;
  }


  /**
   * Sets the value of the 'rawContent' field.
   * @param value the value to set.
   */
  public void setRawContent(CharSequence value) {
    this.rawContent = value;
  }

  /**
   * Gets the value of the 'isSummaryGenerated' field.
   * @return The value of the 'isSummaryGenerated' field.
   */
  public boolean getIsSummaryGenerated() {
    return isSummaryGenerated;
  }


  /**
   * Sets the value of the 'isSummaryGenerated' field.
   * @param value the value to set.
   */
  public void setIsSummaryGenerated(boolean value) {
    this.isSummaryGenerated = value;
  }

  /**
   * Gets the value of the 'genAiSummary' field.
   * @return The value of the 'genAiSummary' field.
   */
  public CharSequence getGenAiSummary() {
    return genAiSummary;
  }


  /**
   * Sets the value of the 'genAiSummary' field.
   * @param value the value to set.
   */
  public void setGenAiSummary(CharSequence value) {
    this.genAiSummary = value;
  }

  /**
   * Gets the value of the 'isQualificationGenerated' field.
   * @return The value of the 'isQualificationGenerated' field.
   */
  public boolean getIsQualificationGenerated() {
    return isQualificationGenerated;
  }


  /**
   * Sets the value of the 'isQualificationGenerated' field.
   * @param value the value to set.
   */
  public void setIsQualificationGenerated(boolean value) {
    this.isQualificationGenerated = value;
  }

  /**
   * Gets the value of the 'qualification' field.
   * @return The value of the 'qualification' field.
   */
  public QualificationAvro getQualification() {
    return qualification;
  }


  /**
   * Sets the value of the 'qualification' field.
   * @param value the value to set.
   */
  public void setQualification(QualificationAvro value) {
    this.qualification = value;
  }

  /**
   * Creates a new KafkaResponseAvro RecordBuilder.
   * @return A new KafkaResponseAvro RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new KafkaResponseAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KafkaResponseAvro RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new KafkaResponseAvro RecordBuilder by copying an existing KafkaResponseAvro instance.
   * @param other The existing instance to copy.
   * @return A new KafkaResponseAvro RecordBuilder
   */
  public static Builder newBuilder(KafkaResponseAvro other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for KafkaResponseAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KafkaResponseAvro>
    implements org.apache.avro.data.RecordBuilder<KafkaResponseAvro> {

    private CharSequence caseId;
    private CharSequence personId;
    private CharSequence riskcheckId;
    private CharSequence screeningHitId;
    private CharSequence hitId;
    private CharSequence hitUrl;
    private CharSequence rmLocation;
    private CharSequence bookingCentre;
    private CharSequence errorString;
    private CharSequence rawContent;
    private boolean isSummaryGenerated;
    private CharSequence genAiSummary;
    private boolean isQualificationGenerated;
    private QualificationAvro qualification;
    private QualificationAvro.Builder qualificationBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.caseId)) {
        this.caseId = data().deepCopy(fields()[0].schema(), other.caseId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.personId)) {
        this.personId = data().deepCopy(fields()[1].schema(), other.personId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.riskcheckId)) {
        this.riskcheckId = data().deepCopy(fields()[2].schema(), other.riskcheckId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.screeningHitId)) {
        this.screeningHitId = data().deepCopy(fields()[3].schema(), other.screeningHitId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.hitId)) {
        this.hitId = data().deepCopy(fields()[4].schema(), other.hitId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.hitUrl)) {
        this.hitUrl = data().deepCopy(fields()[5].schema(), other.hitUrl);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.rmLocation)) {
        this.rmLocation = data().deepCopy(fields()[6].schema(), other.rmLocation);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.bookingCentre)) {
        this.bookingCentre = data().deepCopy(fields()[7].schema(), other.bookingCentre);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.errorString)) {
        this.errorString = data().deepCopy(fields()[8].schema(), other.errorString);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.rawContent)) {
        this.rawContent = data().deepCopy(fields()[9].schema(), other.rawContent);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.isSummaryGenerated)) {
        this.isSummaryGenerated = data().deepCopy(fields()[10].schema(), other.isSummaryGenerated);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.genAiSummary)) {
        this.genAiSummary = data().deepCopy(fields()[11].schema(), other.genAiSummary);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.isQualificationGenerated)) {
        this.isQualificationGenerated = data().deepCopy(fields()[12].schema(), other.isQualificationGenerated);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.qualification)) {
        this.qualification = data().deepCopy(fields()[13].schema(), other.qualification);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (other.hasQualificationBuilder()) {
        this.qualificationBuilder = QualificationAvro.newBuilder(other.getQualificationBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing KafkaResponseAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(KafkaResponseAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.caseId)) {
        this.caseId = data().deepCopy(fields()[0].schema(), other.caseId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.personId)) {
        this.personId = data().deepCopy(fields()[1].schema(), other.personId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.riskcheckId)) {
        this.riskcheckId = data().deepCopy(fields()[2].schema(), other.riskcheckId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.screeningHitId)) {
        this.screeningHitId = data().deepCopy(fields()[3].schema(), other.screeningHitId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hitId)) {
        this.hitId = data().deepCopy(fields()[4].schema(), other.hitId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.hitUrl)) {
        this.hitUrl = data().deepCopy(fields()[5].schema(), other.hitUrl);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.rmLocation)) {
        this.rmLocation = data().deepCopy(fields()[6].schema(), other.rmLocation);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.bookingCentre)) {
        this.bookingCentre = data().deepCopy(fields()[7].schema(), other.bookingCentre);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.errorString)) {
        this.errorString = data().deepCopy(fields()[8].schema(), other.errorString);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.rawContent)) {
        this.rawContent = data().deepCopy(fields()[9].schema(), other.rawContent);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.isSummaryGenerated)) {
        this.isSummaryGenerated = data().deepCopy(fields()[10].schema(), other.isSummaryGenerated);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.genAiSummary)) {
        this.genAiSummary = data().deepCopy(fields()[11].schema(), other.genAiSummary);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.isQualificationGenerated)) {
        this.isQualificationGenerated = data().deepCopy(fields()[12].schema(), other.isQualificationGenerated);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.qualification)) {
        this.qualification = data().deepCopy(fields()[13].schema(), other.qualification);
        fieldSetFlags()[13] = true;
      }
      this.qualificationBuilder = null;
    }

    /**
      * Gets the value of the 'caseId' field.
      * @return The value.
      */
    public CharSequence getCaseId() {
      return caseId;
    }


    /**
      * Sets the value of the 'caseId' field.
      * @param value The value of 'caseId'.
      * @return This builder.
      */
    public Builder setCaseId(CharSequence value) {
      validate(fields()[0], value);
      this.caseId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'caseId' field has been set.
      * @return True if the 'caseId' field has been set, false otherwise.
      */
    public boolean hasCaseId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'caseId' field.
      * @return This builder.
      */
    public Builder clearCaseId() {
      caseId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'personId' field.
      * @return The value.
      */
    public CharSequence getPersonId() {
      return personId;
    }


    /**
      * Sets the value of the 'personId' field.
      * @param value The value of 'personId'.
      * @return This builder.
      */
    public Builder setPersonId(CharSequence value) {
      validate(fields()[1], value);
      this.personId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'personId' field has been set.
      * @return True if the 'personId' field has been set, false otherwise.
      */
    public boolean hasPersonId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'personId' field.
      * @return This builder.
      */
    public Builder clearPersonId() {
      personId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'riskcheckId' field.
      * @return The value.
      */
    public CharSequence getRiskcheckId() {
      return riskcheckId;
    }


    /**
      * Sets the value of the 'riskcheckId' field.
      * @param value The value of 'riskcheckId'.
      * @return This builder.
      */
    public Builder setRiskcheckId(CharSequence value) {
      validate(fields()[2], value);
      this.riskcheckId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'riskcheckId' field has been set.
      * @return True if the 'riskcheckId' field has been set, false otherwise.
      */
    public boolean hasRiskcheckId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'riskcheckId' field.
      * @return This builder.
      */
    public Builder clearRiskcheckId() {
      riskcheckId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'screeningHitId' field.
      * @return The value.
      */
    public CharSequence getScreeningHitId() {
      return screeningHitId;
    }


    /**
      * Sets the value of the 'screeningHitId' field.
      * @param value The value of 'screeningHitId'.
      * @return This builder.
      */
    public Builder setScreeningHitId(CharSequence value) {
      validate(fields()[3], value);
      this.screeningHitId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'screeningHitId' field has been set.
      * @return True if the 'screeningHitId' field has been set, false otherwise.
      */
    public boolean hasScreeningHitId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'screeningHitId' field.
      * @return This builder.
      */
    public Builder clearScreeningHitId() {
      screeningHitId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'hitId' field.
      * @return The value.
      */
    public CharSequence getHitId() {
      return hitId;
    }


    /**
      * Sets the value of the 'hitId' field.
      * @param value The value of 'hitId'.
      * @return This builder.
      */
    public Builder setHitId(CharSequence value) {
      validate(fields()[4], value);
      this.hitId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'hitId' field has been set.
      * @return True if the 'hitId' field has been set, false otherwise.
      */
    public boolean hasHitId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'hitId' field.
      * @return This builder.
      */
    public Builder clearHitId() {
      hitId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'hitUrl' field.
      * @return The value.
      */
    public CharSequence getHitUrl() {
      return hitUrl;
    }


    /**
      * Sets the value of the 'hitUrl' field.
      * @param value The value of 'hitUrl'.
      * @return This builder.
      */
    public Builder setHitUrl(CharSequence value) {
      validate(fields()[5], value);
      this.hitUrl = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'hitUrl' field has been set.
      * @return True if the 'hitUrl' field has been set, false otherwise.
      */
    public boolean hasHitUrl() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'hitUrl' field.
      * @return This builder.
      */
    public Builder clearHitUrl() {
      hitUrl = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'rmLocation' field.
      * @return The value.
      */
    public CharSequence getRmLocation() {
      return rmLocation;
    }


    /**
      * Sets the value of the 'rmLocation' field.
      * @param value The value of 'rmLocation'.
      * @return This builder.
      */
    public Builder setRmLocation(CharSequence value) {
      validate(fields()[6], value);
      this.rmLocation = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'rmLocation' field has been set.
      * @return True if the 'rmLocation' field has been set, false otherwise.
      */
    public boolean hasRmLocation() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'rmLocation' field.
      * @return This builder.
      */
    public Builder clearRmLocation() {
      rmLocation = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookingCentre' field.
      * @return The value.
      */
    public CharSequence getBookingCentre() {
      return bookingCentre;
    }


    /**
      * Sets the value of the 'bookingCentre' field.
      * @param value The value of 'bookingCentre'.
      * @return This builder.
      */
    public Builder setBookingCentre(CharSequence value) {
      validate(fields()[7], value);
      this.bookingCentre = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'bookingCentre' field has been set.
      * @return True if the 'bookingCentre' field has been set, false otherwise.
      */
    public boolean hasBookingCentre() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'bookingCentre' field.
      * @return This builder.
      */
    public Builder clearBookingCentre() {
      bookingCentre = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorString' field.
      * @return The value.
      */
    public CharSequence getErrorString() {
      return errorString;
    }


    /**
      * Sets the value of the 'errorString' field.
      * @param value The value of 'errorString'.
      * @return This builder.
      */
    public Builder setErrorString(CharSequence value) {
      validate(fields()[8], value);
      this.errorString = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'errorString' field has been set.
      * @return True if the 'errorString' field has been set, false otherwise.
      */
    public boolean hasErrorString() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'errorString' field.
      * @return This builder.
      */
    public Builder clearErrorString() {
      errorString = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'rawContent' field.
      * @return The value.
      */
    public CharSequence getRawContent() {
      return rawContent;
    }


    /**
      * Sets the value of the 'rawContent' field.
      * @param value The value of 'rawContent'.
      * @return This builder.
      */
    public Builder setRawContent(CharSequence value) {
      validate(fields()[9], value);
      this.rawContent = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'rawContent' field has been set.
      * @return True if the 'rawContent' field has been set, false otherwise.
      */
    public boolean hasRawContent() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'rawContent' field.
      * @return This builder.
      */
    public Builder clearRawContent() {
      rawContent = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'isSummaryGenerated' field.
      * @return The value.
      */
    public boolean getIsSummaryGenerated() {
      return isSummaryGenerated;
    }


    /**
      * Sets the value of the 'isSummaryGenerated' field.
      * @param value The value of 'isSummaryGenerated'.
      * @return This builder.
      */
    public Builder setIsSummaryGenerated(boolean value) {
      validate(fields()[10], value);
      this.isSummaryGenerated = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'isSummaryGenerated' field has been set.
      * @return True if the 'isSummaryGenerated' field has been set, false otherwise.
      */
    public boolean hasIsSummaryGenerated() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'isSummaryGenerated' field.
      * @return This builder.
      */
    public Builder clearIsSummaryGenerated() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'genAiSummary' field.
      * @return The value.
      */
    public CharSequence getGenAiSummary() {
      return genAiSummary;
    }


    /**
      * Sets the value of the 'genAiSummary' field.
      * @param value The value of 'genAiSummary'.
      * @return This builder.
      */
    public Builder setGenAiSummary(CharSequence value) {
      validate(fields()[11], value);
      this.genAiSummary = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'genAiSummary' field has been set.
      * @return True if the 'genAiSummary' field has been set, false otherwise.
      */
    public boolean hasGenAiSummary() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'genAiSummary' field.
      * @return This builder.
      */
    public Builder clearGenAiSummary() {
      genAiSummary = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'isQualificationGenerated' field.
      * @return The value.
      */
    public boolean getIsQualificationGenerated() {
      return isQualificationGenerated;
    }


    /**
      * Sets the value of the 'isQualificationGenerated' field.
      * @param value The value of 'isQualificationGenerated'.
      * @return This builder.
      */
    public Builder setIsQualificationGenerated(boolean value) {
      validate(fields()[12], value);
      this.isQualificationGenerated = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'isQualificationGenerated' field has been set.
      * @return True if the 'isQualificationGenerated' field has been set, false otherwise.
      */
    public boolean hasIsQualificationGenerated() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'isQualificationGenerated' field.
      * @return This builder.
      */
    public Builder clearIsQualificationGenerated() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualification' field.
      * @return The value.
      */
    public QualificationAvro getQualification() {
      return qualification;
    }


    /**
      * Sets the value of the 'qualification' field.
      * @param value The value of 'qualification'.
      * @return This builder.
      */
    public Builder setQualification(QualificationAvro value) {
      validate(fields()[13], value);
      this.qualificationBuilder = null;
      this.qualification = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'qualification' field has been set.
      * @return True if the 'qualification' field has been set, false otherwise.
      */
    public boolean hasQualification() {
      return fieldSetFlags()[13];
    }

    /**
     * Gets the Builder instance for the 'qualification' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public QualificationAvro.Builder getQualificationBuilder() {
      if (qualificationBuilder == null) {
        if (hasQualification()) {
          setQualificationBuilder(QualificationAvro.newBuilder(qualification));
        } else {
          setQualificationBuilder(QualificationAvro.newBuilder());
        }
      }
      return qualificationBuilder;
    }

    /**
     * Sets the Builder instance for the 'qualification' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Builder setQualificationBuilder(QualificationAvro.Builder value) {
      clearQualification();
      qualificationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'qualification' field has an active Builder instance
     * @return True if the 'qualification' field has an active Builder instance
     */
    public boolean hasQualificationBuilder() {
      return qualificationBuilder != null;
    }

    /**
      * Clears the value of the 'qualification' field.
      * @return This builder.
      */
    public Builder clearQualification() {
      qualification = null;
      qualificationBuilder = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public KafkaResponseAvro build() {
      try {
        KafkaResponseAvro record = new KafkaResponseAvro();
        record.caseId = fieldSetFlags()[0] ? this.caseId : (CharSequence) defaultValue(fields()[0]);
        record.personId = fieldSetFlags()[1] ? this.personId : (CharSequence) defaultValue(fields()[1]);
        record.riskcheckId = fieldSetFlags()[2] ? this.riskcheckId : (CharSequence) defaultValue(fields()[2]);
        record.screeningHitId = fieldSetFlags()[3] ? this.screeningHitId : (CharSequence) defaultValue(fields()[3]);
        record.hitId = fieldSetFlags()[4] ? this.hitId : (CharSequence) defaultValue(fields()[4]);
        record.hitUrl = fieldSetFlags()[5] ? this.hitUrl : (CharSequence) defaultValue(fields()[5]);
        record.rmLocation = fieldSetFlags()[6] ? this.rmLocation : (CharSequence) defaultValue(fields()[6]);
        record.bookingCentre = fieldSetFlags()[7] ? this.bookingCentre : (CharSequence) defaultValue(fields()[7]);
        record.errorString = fieldSetFlags()[8] ? this.errorString : (CharSequence) defaultValue(fields()[8]);
        record.rawContent = fieldSetFlags()[9] ? this.rawContent : (CharSequence) defaultValue(fields()[9]);
        record.isSummaryGenerated = fieldSetFlags()[10] ? this.isSummaryGenerated : (Boolean) defaultValue(fields()[10]);
        record.genAiSummary = fieldSetFlags()[11] ? this.genAiSummary : (CharSequence) defaultValue(fields()[11]);
        record.isQualificationGenerated = fieldSetFlags()[12] ? this.isQualificationGenerated : (Boolean) defaultValue(fields()[12]);
        if (qualificationBuilder != null) {
          try {
            record.qualification = this.qualificationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("qualification"));
            throw e;
          }
        } else {
          record.qualification = fieldSetFlags()[13] ? this.qualification : (QualificationAvro) defaultValue(fields()[13]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<KafkaResponseAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<KafkaResponseAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<KafkaResponseAvro>
    READER$ = (org.apache.avro.io.DatumReader<KafkaResponseAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.caseId);

    out.writeString(this.personId);

    out.writeString(this.riskcheckId);

    out.writeString(this.screeningHitId);

    out.writeString(this.hitId);

    out.writeString(this.hitUrl);

    out.writeString(this.rmLocation);

    out.writeString(this.bookingCentre);

    if (this.errorString == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.errorString);
    }

    if (this.rawContent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.rawContent);
    }

    out.writeBoolean(this.isSummaryGenerated);

    if (this.genAiSummary == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.genAiSummary);
    }

    out.writeBoolean(this.isQualificationGenerated);

    this.qualification.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.caseId = in.readString(this.caseId instanceof Utf8 ? (Utf8)this.caseId : null);

      this.personId = in.readString(this.personId instanceof Utf8 ? (Utf8)this.personId : null);

      this.riskcheckId = in.readString(this.riskcheckId instanceof Utf8 ? (Utf8)this.riskcheckId : null);

      this.screeningHitId = in.readString(this.screeningHitId instanceof Utf8 ? (Utf8)this.screeningHitId : null);

      this.hitId = in.readString(this.hitId instanceof Utf8 ? (Utf8)this.hitId : null);

      this.hitUrl = in.readString(this.hitUrl instanceof Utf8 ? (Utf8)this.hitUrl : null);

      this.rmLocation = in.readString(this.rmLocation instanceof Utf8 ? (Utf8)this.rmLocation : null);

      this.bookingCentre = in.readString(this.bookingCentre instanceof Utf8 ? (Utf8)this.bookingCentre : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.errorString = null;
      } else {
        this.errorString = in.readString(this.errorString instanceof Utf8 ? (Utf8)this.errorString : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rawContent = null;
      } else {
        this.rawContent = in.readString(this.rawContent instanceof Utf8 ? (Utf8)this.rawContent : null);
      }

      this.isSummaryGenerated = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.genAiSummary = null;
      } else {
        this.genAiSummary = in.readString(this.genAiSummary instanceof Utf8 ? (Utf8)this.genAiSummary : null);
      }

      this.isQualificationGenerated = in.readBoolean();

      if (this.qualification == null) {
        this.qualification = new QualificationAvro();
      }
      this.qualification.customDecode(in);

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.caseId = in.readString(this.caseId instanceof Utf8 ? (Utf8)this.caseId : null);
          break;

        case 1:
          this.personId = in.readString(this.personId instanceof Utf8 ? (Utf8)this.personId : null);
          break;

        case 2:
          this.riskcheckId = in.readString(this.riskcheckId instanceof Utf8 ? (Utf8)this.riskcheckId : null);
          break;

        case 3:
          this.screeningHitId = in.readString(this.screeningHitId instanceof Utf8 ? (Utf8)this.screeningHitId : null);
          break;

        case 4:
          this.hitId = in.readString(this.hitId instanceof Utf8 ? (Utf8)this.hitId : null);
          break;

        case 5:
          this.hitUrl = in.readString(this.hitUrl instanceof Utf8 ? (Utf8)this.hitUrl : null);
          break;

        case 6:
          this.rmLocation = in.readString(this.rmLocation instanceof Utf8 ? (Utf8)this.rmLocation : null);
          break;

        case 7:
          this.bookingCentre = in.readString(this.bookingCentre instanceof Utf8 ? (Utf8)this.bookingCentre : null);
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.errorString = null;
          } else {
            this.errorString = in.readString(this.errorString instanceof Utf8 ? (Utf8)this.errorString : null);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rawContent = null;
          } else {
            this.rawContent = in.readString(this.rawContent instanceof Utf8 ? (Utf8)this.rawContent : null);
          }
          break;

        case 10:
          this.isSummaryGenerated = in.readBoolean();
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.genAiSummary = null;
          } else {
            this.genAiSummary = in.readString(this.genAiSummary instanceof Utf8 ? (Utf8)this.genAiSummary : null);
          }
          break;

        case 12:
          this.isQualificationGenerated = in.readBoolean();
          break;

        case 13:
          if (this.qualification == null) {
            this.qualification = new QualificationAvro();
          }
          this.qualification.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










