/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.imtf.dbs.namescreening.common.kafka.old;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class GenAiResponseRecord extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 4827508945545297200L;

    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
            .parse(
                    "{\"type\":\"record\",\"name\":\"GenAiResponseRecord\",\"namespace\":\"com.imtf.dbs.namescreening.common.kafka.schema\",\"fields\":[{\"name\":\"caseId\",\"type\":\"string\"},{\"name\":\"personId\",\"type\":\"string\"},{\"name\":\"riskCheckId\",\"type\":\"string\"},{\"name\":\"screeningHitId\",\"type\":\"string\"},{\"name\":\"hitUrl\",\"type\":{\"type\":\"record\",\"name\":\"GenAiResponseHitUrl\",\"fields\":[{\"name\":\"hitId\",\"type\":\"string\"},{\"name\":\"hitUrl\",\"type\":\"string\"},{\"name\":\"rmLocation\",\"type\":\"string\"},{\"name\":\"bookingCentre\",\"type\":\"string\"},{\"name\":\"errorString\",\"type\":\"string\"},{\"name\":\"rawContent\",\"type\":\"string\"},{\"name\":\"isSummaryGenerated\",\"type\":\"boolean\"},{\"name\":\"genAiSummary\",\"type\":\"string\"},{\"name\":\"isQualificationGenerated\",\"type\":\"boolean\"}]}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<GenAiResponseRecord> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<GenAiResponseRecord> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<GenAiResponseRecord> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<GenAiResponseRecord> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<GenAiResponseRecord> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this GenAiResponseRecord to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a GenAiResponseRecord from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a GenAiResponseRecord instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static GenAiResponseRecord fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private CharSequence caseId;
    private CharSequence personId;
    private CharSequence riskCheckId;
    private CharSequence screeningHitId;
    private GenAiResponseHitUrl hitUrl;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public GenAiResponseRecord() {}

    /**
     * All-args constructor.
     * @param caseId The new value for caseId
     * @param personId The new value for personId
     * @param riskCheckId The new value for riskCheckId
     * @param screeningHitId The new value for screeningHitId
     * @param hitUrl The new value for hitUrl
     */
    public GenAiResponseRecord(
            CharSequence caseId,
            CharSequence personId,
            CharSequence riskCheckId,
            CharSequence screeningHitId,
            GenAiResponseHitUrl hitUrl) {
        this.caseId = caseId;
        this.personId = personId;
        this.riskCheckId = riskCheckId;
        this.screeningHitId = screeningHitId;
        this.hitUrl = hitUrl;
    }

    @Override
    public SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return caseId;
            case 1:
                return personId;
            case 2:
                return riskCheckId;
            case 3:
                return screeningHitId;
            case 4:
                return hitUrl;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                caseId = (CharSequence) value$;
                break;
            case 1:
                personId = (CharSequence) value$;
                break;
            case 2:
                riskCheckId = (CharSequence) value$;
                break;
            case 3:
                screeningHitId = (CharSequence) value$;
                break;
            case 4:
                hitUrl = (GenAiResponseHitUrl) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'caseId' field.
     * @return The value of the 'caseId' field.
     */
    public CharSequence getCaseId() {
        return caseId;
    }

    /**
     * Sets the value of the 'caseId' field.
     * @param value the value to set.
     */
    public void setCaseId(CharSequence value) {
        this.caseId = value;
    }

    /**
     * Gets the value of the 'personId' field.
     * @return The value of the 'personId' field.
     */
    public CharSequence getPersonId() {
        return personId;
    }

    /**
     * Sets the value of the 'personId' field.
     * @param value the value to set.
     */
    public void setPersonId(CharSequence value) {
        this.personId = value;
    }

    /**
     * Gets the value of the 'riskCheckId' field.
     * @return The value of the 'riskCheckId' field.
     */
    public CharSequence getRiskCheckId() {
        return riskCheckId;
    }

    /**
     * Sets the value of the 'riskCheckId' field.
     * @param value the value to set.
     */
    public void setRiskCheckId(CharSequence value) {
        this.riskCheckId = value;
    }

    /**
     * Gets the value of the 'screeningHitId' field.
     * @return The value of the 'screeningHitId' field.
     */
    public CharSequence getScreeningHitId() {
        return screeningHitId;
    }

    /**
     * Sets the value of the 'screeningHitId' field.
     * @param value the value to set.
     */
    public void setScreeningHitId(CharSequence value) {
        this.screeningHitId = value;
    }

    /**
     * Gets the value of the 'hitUrl' field.
     * @return The value of the 'hitUrl' field.
     */
    public GenAiResponseHitUrl getHitUrl() {
        return hitUrl;
    }

    /**
     * Sets the value of the 'hitUrl' field.
     * @param value the value to set.
     */
    public void setHitUrl(GenAiResponseHitUrl value) {
        this.hitUrl = value;
    }

    /**
     * Creates a new GenAiResponseRecord RecordBuilder.
     * @return A new GenAiResponseRecord RecordBuilder
     */
    public static Builder newBuilder() {
        return new Builder();
    }

    /**
     * Creates a new GenAiResponseRecord RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new GenAiResponseRecord RecordBuilder
     */
    public static Builder newBuilder(Builder other) {
        if (other == null) {
            return new Builder();
        } else {
            return new Builder(other);
        }
    }

    /**
     * Creates a new GenAiResponseRecord RecordBuilder by copying an existing GenAiResponseRecord instance.
     * @param other The existing instance to copy.
     * @return A new GenAiResponseRecord RecordBuilder
     */
    public static Builder newBuilder(GenAiResponseRecord other) {
        if (other == null) {
            return new Builder();
        } else {
            return new Builder(other);
        }
    }

    /**
     * RecordBuilder for GenAiResponseRecord instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GenAiResponseRecord>
            implements org.apache.avro.data.RecordBuilder<GenAiResponseRecord> {

        private CharSequence caseId;
        private CharSequence personId;
        private CharSequence riskCheckId;
        private CharSequence screeningHitId;
        private GenAiResponseHitUrl hitUrl;
        private GenAiResponseHitUrl.Builder hitUrlBuilder;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.caseId)) {
                this.caseId = data().deepCopy(fields()[0].schema(), other.caseId);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.personId)) {
                this.personId = data().deepCopy(fields()[1].schema(), other.personId);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.riskCheckId)) {
                this.riskCheckId = data().deepCopy(fields()[2].schema(), other.riskCheckId);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.screeningHitId)) {
                this.screeningHitId = data().deepCopy(fields()[3].schema(), other.screeningHitId);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.hitUrl)) {
                this.hitUrl = data().deepCopy(fields()[4].schema(), other.hitUrl);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (other.hasHitUrlBuilder()) {
                this.hitUrlBuilder = GenAiResponseHitUrl.newBuilder(other.getHitUrlBuilder());
            }
        }

        /**
         * Creates a Builder by copying an existing GenAiResponseRecord instance
         * @param other The existing instance to copy.
         */
        private Builder(GenAiResponseRecord other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.caseId)) {
                this.caseId = data().deepCopy(fields()[0].schema(), other.caseId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.personId)) {
                this.personId = data().deepCopy(fields()[1].schema(), other.personId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.riskCheckId)) {
                this.riskCheckId = data().deepCopy(fields()[2].schema(), other.riskCheckId);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.screeningHitId)) {
                this.screeningHitId = data().deepCopy(fields()[3].schema(), other.screeningHitId);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.hitUrl)) {
                this.hitUrl = data().deepCopy(fields()[4].schema(), other.hitUrl);
                fieldSetFlags()[4] = true;
            }
            this.hitUrlBuilder = null;
        }

        /**
         * Gets the value of the 'caseId' field.
         * @return The value.
         */
        public CharSequence getCaseId() {
            return caseId;
        }

        /**
         * Sets the value of the 'caseId' field.
         * @param value The value of 'caseId'.
         * @return This builder.
         */
        public Builder setCaseId(CharSequence value) {
            validate(fields()[0], value);
            this.caseId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'caseId' field has been set.
         * @return True if the 'caseId' field has been set, false otherwise.
         */
        public boolean hasCaseId() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'caseId' field.
         * @return This builder.
         */
        public Builder clearCaseId() {
            caseId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'personId' field.
         * @return The value.
         */
        public CharSequence getPersonId() {
            return personId;
        }

        /**
         * Sets the value of the 'personId' field.
         * @param value The value of 'personId'.
         * @return This builder.
         */
        public Builder setPersonId(CharSequence value) {
            validate(fields()[1], value);
            this.personId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'personId' field has been set.
         * @return True if the 'personId' field has been set, false otherwise.
         */
        public boolean hasPersonId() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'personId' field.
         * @return This builder.
         */
        public Builder clearPersonId() {
            personId = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'riskCheckId' field.
         * @return The value.
         */
        public CharSequence getRiskCheckId() {
            return riskCheckId;
        }

        /**
         * Sets the value of the 'riskCheckId' field.
         * @param value The value of 'riskCheckId'.
         * @return This builder.
         */
        public Builder setRiskCheckId(CharSequence value) {
            validate(fields()[2], value);
            this.riskCheckId = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'riskCheckId' field has been set.
         * @return True if the 'riskCheckId' field has been set, false otherwise.
         */
        public boolean hasRiskCheckId() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'riskCheckId' field.
         * @return This builder.
         */
        public Builder clearRiskCheckId() {
            riskCheckId = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'screeningHitId' field.
         * @return The value.
         */
        public CharSequence getScreeningHitId() {
            return screeningHitId;
        }

        /**
         * Sets the value of the 'screeningHitId' field.
         * @param value The value of 'screeningHitId'.
         * @return This builder.
         */
        public Builder setScreeningHitId(CharSequence value) {
            validate(fields()[3], value);
            this.screeningHitId = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'screeningHitId' field has been set.
         * @return True if the 'screeningHitId' field has been set, false otherwise.
         */
        public boolean hasScreeningHitId() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'screeningHitId' field.
         * @return This builder.
         */
        public Builder clearScreeningHitId() {
            screeningHitId = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'hitUrl' field.
         * @return The value.
         */
        public GenAiResponseHitUrl getHitUrl() {
            return hitUrl;
        }

        /**
         * Sets the value of the 'hitUrl' field.
         * @param value The value of 'hitUrl'.
         * @return This builder.
         */
        public Builder setHitUrl(GenAiResponseHitUrl value) {
            validate(fields()[4], value);
            this.hitUrlBuilder = null;
            this.hitUrl = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'hitUrl' field has been set.
         * @return True if the 'hitUrl' field has been set, false otherwise.
         */
        public boolean hasHitUrl() {
            return fieldSetFlags()[4];
        }

        /**
         * Gets the Builder instance for the 'hitUrl' field and creates one if it doesn't exist yet.
         * @return This builder.
         */
        public GenAiResponseHitUrl.Builder getHitUrlBuilder() {
            if (hitUrlBuilder == null) {
                if (hasHitUrl()) {
                    setHitUrlBuilder(GenAiResponseHitUrl.newBuilder(hitUrl));
                } else {
                    setHitUrlBuilder(GenAiResponseHitUrl.newBuilder());
                }
            }
            return hitUrlBuilder;
        }

        /**
         * Sets the Builder instance for the 'hitUrl' field
         * @param value The builder instance that must be set.
         * @return This builder.
         */
        public Builder setHitUrlBuilder(GenAiResponseHitUrl.Builder value) {
            clearHitUrl();
            hitUrlBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'hitUrl' field has an active Builder instance
         * @return True if the 'hitUrl' field has an active Builder instance
         */
        public boolean hasHitUrlBuilder() {
            return hitUrlBuilder != null;
        }

        /**
         * Clears the value of the 'hitUrl' field.
         * @return This builder.
         */
        public Builder clearHitUrl() {
            hitUrl = null;
            hitUrlBuilder = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public GenAiResponseRecord build() {
            try {
                GenAiResponseRecord record = new GenAiResponseRecord();
                record.caseId = fieldSetFlags()[0] ? this.caseId : (CharSequence) defaultValue(fields()[0]);
                record.personId = fieldSetFlags()[1] ? this.personId : (CharSequence) defaultValue(fields()[1]);
                record.riskCheckId = fieldSetFlags()[2] ? this.riskCheckId : (CharSequence) defaultValue(fields()[2]);
                record.screeningHitId =
                        fieldSetFlags()[3] ? this.screeningHitId : (CharSequence) defaultValue(fields()[3]);
                if (hitUrlBuilder != null) {
                    try {
                        record.hitUrl = this.hitUrlBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("hitUrl"));
                        throw e;
                    }
                } else {
                    record.hitUrl = fieldSetFlags()[4] ? this.hitUrl : (GenAiResponseHitUrl) defaultValue(fields()[4]);
                }
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<GenAiResponseRecord> WRITER$ =
            (org.apache.avro.io.DatumWriter<GenAiResponseRecord>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<GenAiResponseRecord> READER$ =
            (org.apache.avro.io.DatumReader<GenAiResponseRecord>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
        out.writeString(this.caseId);

        out.writeString(this.personId);

        out.writeString(this.riskCheckId);

        out.writeString(this.screeningHitId);

        this.hitUrl.customEncode(out);
    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.caseId = in.readString(this.caseId instanceof Utf8 ? (Utf8) this.caseId : null);

            this.personId = in.readString(this.personId instanceof Utf8 ? (Utf8) this.personId : null);

            this.riskCheckId = in.readString(this.riskCheckId instanceof Utf8 ? (Utf8) this.riskCheckId : null);

            this.screeningHitId =
                    in.readString(this.screeningHitId instanceof Utf8 ? (Utf8) this.screeningHitId : null);

            if (this.hitUrl == null) {
                this.hitUrl = new GenAiResponseHitUrl();
            }
            this.hitUrl.customDecode(in);

        } else {
            for (int i = 0; i < 5; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.caseId = in.readString(this.caseId instanceof Utf8 ? (Utf8) this.caseId : null);
                        break;

                    case 1:
                        this.personId = in.readString(this.personId instanceof Utf8 ? (Utf8) this.personId : null);
                        break;

                    case 2:
                        this.riskCheckId =
                                in.readString(this.riskCheckId instanceof Utf8 ? (Utf8) this.riskCheckId : null);
                        break;

                    case 3:
                        this.screeningHitId =
                                in.readString(this.screeningHitId instanceof Utf8 ? (Utf8) this.screeningHitId : null);
                        break;

                    case 4:
                        if (this.hitUrl == null) {
                            this.hitUrl = new GenAiResponseHitUrl();
                        }
                        this.hitUrl.customDecode(in);
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}
