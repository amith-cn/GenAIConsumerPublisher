/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.imtf.dbs.namescreening.common.kafka.old;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class GenAiResponseHitUrl extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -1222880019750073252L;

    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
            .parse(
                    "{\"type\":\"record\",\"name\":\"GenAiResponseHitUrl\",\"namespace\":\"com.imtf.dbs.namescreening.common.kafka.schema\",\"fields\":[{\"name\":\"hitId\",\"type\":\"string\"},{\"name\":\"hitUrl\",\"type\":\"string\"},{\"name\":\"rmLocation\",\"type\":\"string\"},{\"name\":\"bookingCentre\",\"type\":\"string\"},{\"name\":\"errorString\",\"type\":\"string\"},{\"name\":\"rawContent\",\"type\":\"string\"},{\"name\":\"isSummaryGenerated\",\"type\":\"boolean\"},{\"name\":\"genAiSummary\",\"type\":\"string\"},{\"name\":\"isQualificationGenerated\",\"type\":\"boolean\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<GenAiResponseHitUrl> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<GenAiResponseHitUrl> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<GenAiResponseHitUrl> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<GenAiResponseHitUrl> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<GenAiResponseHitUrl> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this GenAiResponseHitUrl to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a GenAiResponseHitUrl from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a GenAiResponseHitUrl instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static GenAiResponseHitUrl fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private CharSequence hitId;
    private CharSequence hitUrl;
    private CharSequence rmLocation;
    private CharSequence bookingCentre;
    private CharSequence errorString;
    private CharSequence rawContent;
    private boolean isSummaryGenerated;
    private CharSequence genAiSummary;
    private boolean isQualificationGenerated;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public GenAiResponseHitUrl() {}

    /**
     * All-args constructor.
     * @param hitId The new value for hitId
     * @param hitUrl The new value for hitUrl
     * @param rmLocation The new value for rmLocation
     * @param bookingCentre The new value for bookingCentre
     * @param errorString The new value for errorString
     * @param rawContent The new value for rawContent
     * @param isSummaryGenerated The new value for isSummaryGenerated
     * @param genAiSummary The new value for genAiSummary
     * @param isQualificationGenerated The new value for isQualificationGenerated
     */
    public GenAiResponseHitUrl(
            CharSequence hitId,
            CharSequence hitUrl,
            CharSequence rmLocation,
            CharSequence bookingCentre,
            CharSequence errorString,
            CharSequence rawContent,
            Boolean isSummaryGenerated,
            CharSequence genAiSummary,
            Boolean isQualificationGenerated) {
        this.hitId = hitId;
        this.hitUrl = hitUrl;
        this.rmLocation = rmLocation;
        this.bookingCentre = bookingCentre;
        this.errorString = errorString;
        this.rawContent = rawContent;
        this.isSummaryGenerated = isSummaryGenerated;
        this.genAiSummary = genAiSummary;
        this.isQualificationGenerated = isQualificationGenerated;
    }

    @Override
    public SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return hitId;
            case 1:
                return hitUrl;
            case 2:
                return rmLocation;
            case 3:
                return bookingCentre;
            case 4:
                return errorString;
            case 5:
                return rawContent;
            case 6:
                return isSummaryGenerated;
            case 7:
                return genAiSummary;
            case 8:
                return isQualificationGenerated;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                hitId = (CharSequence) value$;
                break;
            case 1:
                hitUrl = (CharSequence) value$;
                break;
            case 2:
                rmLocation = (CharSequence) value$;
                break;
            case 3:
                bookingCentre = (CharSequence) value$;
                break;
            case 4:
                errorString = (CharSequence) value$;
                break;
            case 5:
                rawContent = (CharSequence) value$;
                break;
            case 6:
                isSummaryGenerated = (Boolean) value$;
                break;
            case 7:
                genAiSummary = (CharSequence) value$;
                break;
            case 8:
                isQualificationGenerated = (Boolean) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'hitId' field.
     * @return The value of the 'hitId' field.
     */
    public CharSequence getHitId() {
        return hitId;
    }

    /**
     * Sets the value of the 'hitId' field.
     * @param value the value to set.
     */
    public void setHitId(CharSequence value) {
        this.hitId = value;
    }

    /**
     * Gets the value of the 'hitUrl' field.
     * @return The value of the 'hitUrl' field.
     */
    public CharSequence getHitUrl() {
        return hitUrl;
    }

    /**
     * Sets the value of the 'hitUrl' field.
     * @param value the value to set.
     */
    public void setHitUrl(CharSequence value) {
        this.hitUrl = value;
    }

    /**
     * Gets the value of the 'rmLocation' field.
     * @return The value of the 'rmLocation' field.
     */
    public CharSequence getRmLocation() {
        return rmLocation;
    }

    /**
     * Sets the value of the 'rmLocation' field.
     * @param value the value to set.
     */
    public void setRmLocation(CharSequence value) {
        this.rmLocation = value;
    }

    /**
     * Gets the value of the 'bookingCentre' field.
     * @return The value of the 'bookingCentre' field.
     */
    public CharSequence getBookingCentre() {
        return bookingCentre;
    }

    /**
     * Sets the value of the 'bookingCentre' field.
     * @param value the value to set.
     */
    public void setBookingCentre(CharSequence value) {
        this.bookingCentre = value;
    }

    /**
     * Gets the value of the 'errorString' field.
     * @return The value of the 'errorString' field.
     */
    public CharSequence getErrorString() {
        return errorString;
    }

    /**
     * Sets the value of the 'errorString' field.
     * @param value the value to set.
     */
    public void setErrorString(CharSequence value) {
        this.errorString = value;
    }

    /**
     * Gets the value of the 'rawContent' field.
     * @return The value of the 'rawContent' field.
     */
    public CharSequence getRawContent() {
        return rawContent;
    }

    /**
     * Sets the value of the 'rawContent' field.
     * @param value the value to set.
     */
    public void setRawContent(CharSequence value) {
        this.rawContent = value;
    }

    /**
     * Gets the value of the 'isSummaryGenerated' field.
     * @return The value of the 'isSummaryGenerated' field.
     */
    public boolean getIsSummaryGenerated() {
        return isSummaryGenerated;
    }

    /**
     * Sets the value of the 'isSummaryGenerated' field.
     * @param value the value to set.
     */
    public void setIsSummaryGenerated(boolean value) {
        this.isSummaryGenerated = value;
    }

    /**
     * Gets the value of the 'genAiSummary' field.
     * @return The value of the 'genAiSummary' field.
     */
    public CharSequence getGenAiSummary() {
        return genAiSummary;
    }

    /**
     * Sets the value of the 'genAiSummary' field.
     * @param value the value to set.
     */
    public void setGenAiSummary(CharSequence value) {
        this.genAiSummary = value;
    }

    /**
     * Gets the value of the 'isQualificationGenerated' field.
     * @return The value of the 'isQualificationGenerated' field.
     */
    public boolean getIsQualificationGenerated() {
        return isQualificationGenerated;
    }

    /**
     * Sets the value of the 'isQualificationGenerated' field.
     * @param value the value to set.
     */
    public void setIsQualificationGenerated(boolean value) {
        this.isQualificationGenerated = value;
    }

    /**
     * Creates a new GenAiResponseHitUrl RecordBuilder.
     * @return A new GenAiResponseHitUrl RecordBuilder
     */
    public static Builder newBuilder() {
        return new Builder();
    }

    /**
     * Creates a new GenAiResponseHitUrl RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new GenAiResponseHitUrl RecordBuilder
     */
    public static Builder newBuilder(Builder other) {
        if (other == null) {
            return new Builder();
        } else {
            return new Builder(other);
        }
    }

    /**
     * Creates a new GenAiResponseHitUrl RecordBuilder by copying an existing GenAiResponseHitUrl instance.
     * @param other The existing instance to copy.
     * @return A new GenAiResponseHitUrl RecordBuilder
     */
    public static Builder newBuilder(GenAiResponseHitUrl other) {
        if (other == null) {
            return new Builder();
        } else {
            return new Builder(other);
        }
    }

    /**
     * RecordBuilder for GenAiResponseHitUrl instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GenAiResponseHitUrl>
            implements org.apache.avro.data.RecordBuilder<GenAiResponseHitUrl> {

        private CharSequence hitId;
        private CharSequence hitUrl;
        private CharSequence rmLocation;
        private CharSequence bookingCentre;
        private CharSequence errorString;
        private CharSequence rawContent;
        private boolean isSummaryGenerated;
        private CharSequence genAiSummary;
        private boolean isQualificationGenerated;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.hitId)) {
                this.hitId = data().deepCopy(fields()[0].schema(), other.hitId);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.hitUrl)) {
                this.hitUrl = data().deepCopy(fields()[1].schema(), other.hitUrl);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.rmLocation)) {
                this.rmLocation = data().deepCopy(fields()[2].schema(), other.rmLocation);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.bookingCentre)) {
                this.bookingCentre = data().deepCopy(fields()[3].schema(), other.bookingCentre);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.errorString)) {
                this.errorString = data().deepCopy(fields()[4].schema(), other.errorString);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.rawContent)) {
                this.rawContent = data().deepCopy(fields()[5].schema(), other.rawContent);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.isSummaryGenerated)) {
                this.isSummaryGenerated = data().deepCopy(fields()[6].schema(), other.isSummaryGenerated);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.genAiSummary)) {
                this.genAiSummary = data().deepCopy(fields()[7].schema(), other.genAiSummary);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.isQualificationGenerated)) {
                this.isQualificationGenerated = data().deepCopy(fields()[8].schema(), other.isQualificationGenerated);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
        }

        /**
         * Creates a Builder by copying an existing GenAiResponseHitUrl instance
         * @param other The existing instance to copy.
         */
        private Builder(GenAiResponseHitUrl other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.hitId)) {
                this.hitId = data().deepCopy(fields()[0].schema(), other.hitId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.hitUrl)) {
                this.hitUrl = data().deepCopy(fields()[1].schema(), other.hitUrl);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.rmLocation)) {
                this.rmLocation = data().deepCopy(fields()[2].schema(), other.rmLocation);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.bookingCentre)) {
                this.bookingCentre = data().deepCopy(fields()[3].schema(), other.bookingCentre);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.errorString)) {
                this.errorString = data().deepCopy(fields()[4].schema(), other.errorString);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.rawContent)) {
                this.rawContent = data().deepCopy(fields()[5].schema(), other.rawContent);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.isSummaryGenerated)) {
                this.isSummaryGenerated = data().deepCopy(fields()[6].schema(), other.isSummaryGenerated);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.genAiSummary)) {
                this.genAiSummary = data().deepCopy(fields()[7].schema(), other.genAiSummary);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.isQualificationGenerated)) {
                this.isQualificationGenerated = data().deepCopy(fields()[8].schema(), other.isQualificationGenerated);
                fieldSetFlags()[8] = true;
            }
        }

        /**
         * Gets the value of the 'hitId' field.
         * @return The value.
         */
        public CharSequence getHitId() {
            return hitId;
        }

        /**
         * Sets the value of the 'hitId' field.
         * @param value The value of 'hitId'.
         * @return This builder.
         */
        public Builder setHitId(CharSequence value) {
            validate(fields()[0], value);
            this.hitId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'hitId' field has been set.
         * @return True if the 'hitId' field has been set, false otherwise.
         */
        public boolean hasHitId() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'hitId' field.
         * @return This builder.
         */
        public Builder clearHitId() {
            hitId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'hitUrl' field.
         * @return The value.
         */
        public CharSequence getHitUrl() {
            return hitUrl;
        }

        /**
         * Sets the value of the 'hitUrl' field.
         * @param value The value of 'hitUrl'.
         * @return This builder.
         */
        public Builder setHitUrl(CharSequence value) {
            validate(fields()[1], value);
            this.hitUrl = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'hitUrl' field has been set.
         * @return True if the 'hitUrl' field has been set, false otherwise.
         */
        public boolean hasHitUrl() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'hitUrl' field.
         * @return This builder.
         */
        public Builder clearHitUrl() {
            hitUrl = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'rmLocation' field.
         * @return The value.
         */
        public CharSequence getRmLocation() {
            return rmLocation;
        }

        /**
         * Sets the value of the 'rmLocation' field.
         * @param value The value of 'rmLocation'.
         * @return This builder.
         */
        public Builder setRmLocation(CharSequence value) {
            validate(fields()[2], value);
            this.rmLocation = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'rmLocation' field has been set.
         * @return True if the 'rmLocation' field has been set, false otherwise.
         */
        public boolean hasRmLocation() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'rmLocation' field.
         * @return This builder.
         */
        public Builder clearRmLocation() {
            rmLocation = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'bookingCentre' field.
         * @return The value.
         */
        public CharSequence getBookingCentre() {
            return bookingCentre;
        }

        /**
         * Sets the value of the 'bookingCentre' field.
         * @param value The value of 'bookingCentre'.
         * @return This builder.
         */
        public Builder setBookingCentre(CharSequence value) {
            validate(fields()[3], value);
            this.bookingCentre = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'bookingCentre' field has been set.
         * @return True if the 'bookingCentre' field has been set, false otherwise.
         */
        public boolean hasBookingCentre() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'bookingCentre' field.
         * @return This builder.
         */
        public Builder clearBookingCentre() {
            bookingCentre = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'errorString' field.
         * @return The value.
         */
        public CharSequence getErrorString() {
            return errorString;
        }

        /**
         * Sets the value of the 'errorString' field.
         * @param value The value of 'errorString'.
         * @return This builder.
         */
        public Builder setErrorString(CharSequence value) {
            validate(fields()[4], value);
            this.errorString = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'errorString' field has been set.
         * @return True if the 'errorString' field has been set, false otherwise.
         */
        public boolean hasErrorString() {
            return fieldSetFlags()[4];
        }

        /**
         * Clears the value of the 'errorString' field.
         * @return This builder.
         */
        public Builder clearErrorString() {
            errorString = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'rawContent' field.
         * @return The value.
         */
        public CharSequence getRawContent() {
            return rawContent;
        }

        /**
         * Sets the value of the 'rawContent' field.
         * @param value The value of 'rawContent'.
         * @return This builder.
         */
        public Builder setRawContent(CharSequence value) {
            validate(fields()[5], value);
            this.rawContent = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'rawContent' field has been set.
         * @return True if the 'rawContent' field has been set, false otherwise.
         */
        public boolean hasRawContent() {
            return fieldSetFlags()[5];
        }

        /**
         * Clears the value of the 'rawContent' field.
         * @return This builder.
         */
        public Builder clearRawContent() {
            rawContent = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'isSummaryGenerated' field.
         * @return The value.
         */
        public boolean getIsSummaryGenerated() {
            return isSummaryGenerated;
        }

        /**
         * Sets the value of the 'isSummaryGenerated' field.
         * @param value The value of 'isSummaryGenerated'.
         * @return This builder.
         */
        public Builder setIsSummaryGenerated(boolean value) {
            validate(fields()[6], value);
            this.isSummaryGenerated = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'isSummaryGenerated' field has been set.
         * @return True if the 'isSummaryGenerated' field has been set, false otherwise.
         */
        public boolean hasIsSummaryGenerated() {
            return fieldSetFlags()[6];
        }

        /**
         * Clears the value of the 'isSummaryGenerated' field.
         * @return This builder.
         */
        public Builder clearIsSummaryGenerated() {
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'genAiSummary' field.
         * @return The value.
         */
        public CharSequence getGenAiSummary(String genAiSummary) {
            return this.genAiSummary;
        }

        /**
         * Sets the value of the 'genAiSummary' field.
         * @param value The value of 'genAiSummary'.
         * @return This builder.
         */
        public Builder setGenAiSummary(CharSequence value) {
            validate(fields()[7], value);
            this.genAiSummary = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'genAiSummary' field has been set.
         * @return True if the 'genAiSummary' field has been set, false otherwise.
         */
        public boolean hasGenAiSummary() {
            return fieldSetFlags()[7];
        }

        /**
         * Clears the value of the 'genAiSummary' field.
         * @return This builder.
         */
        public Builder clearGenAiSummary() {
            genAiSummary = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'isQualificationGenerated' field.
         * @return The value.
         */
        public boolean getIsQualificationGenerated() {
            return isQualificationGenerated;
        }

        /**
         * Sets the value of the 'isQualificationGenerated' field.
         * @param value The value of 'isQualificationGenerated'.
         * @return This builder.
         */
        public Builder setIsQualificationGenerated(boolean value) {
            validate(fields()[8], value);
            this.isQualificationGenerated = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'isQualificationGenerated' field has been set.
         * @return True if the 'isQualificationGenerated' field has been set, false otherwise.
         */
        public boolean hasIsQualificationGenerated() {
            return fieldSetFlags()[8];
        }

        /**
         * Clears the value of the 'isQualificationGenerated' field.
         * @return This builder.
         */
        public Builder clearIsQualificationGenerated() {
            fieldSetFlags()[8] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public GenAiResponseHitUrl build() {
            try {
                GenAiResponseHitUrl record = new GenAiResponseHitUrl();
                record.hitId = fieldSetFlags()[0] ? this.hitId : (CharSequence) defaultValue(fields()[0]);
                record.hitUrl = fieldSetFlags()[1] ? this.hitUrl : (CharSequence) defaultValue(fields()[1]);
                record.rmLocation = fieldSetFlags()[2] ? this.rmLocation : (CharSequence) defaultValue(fields()[2]);
                record.bookingCentre =
                        fieldSetFlags()[3] ? this.bookingCentre : (CharSequence) defaultValue(fields()[3]);
                record.errorString = fieldSetFlags()[4] ? this.errorString : (CharSequence) defaultValue(fields()[4]);
                record.rawContent = fieldSetFlags()[5] ? this.rawContent : (CharSequence) defaultValue(fields()[5]);
                record.isSummaryGenerated =
                        fieldSetFlags()[6] ? this.isSummaryGenerated : (Boolean) defaultValue(fields()[6]);
                record.genAiSummary = fieldSetFlags()[7] ? this.genAiSummary : (CharSequence) defaultValue(fields()[7]);
                record.isQualificationGenerated =
                        fieldSetFlags()[8] ? this.isQualificationGenerated : (Boolean) defaultValue(fields()[8]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<GenAiResponseHitUrl> WRITER$ =
            (org.apache.avro.io.DatumWriter<GenAiResponseHitUrl>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<GenAiResponseHitUrl> READER$ =
            (org.apache.avro.io.DatumReader<GenAiResponseHitUrl>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
        out.writeString(this.hitId);

        out.writeString(this.hitUrl);

        out.writeString(this.rmLocation);

        out.writeString(this.bookingCentre);

        out.writeString(this.errorString);

        out.writeString(this.rawContent);

        out.writeBoolean(this.isSummaryGenerated);

        out.writeString(this.genAiSummary);

        out.writeBoolean(this.isQualificationGenerated);
    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.hitId = in.readString(this.hitId instanceof Utf8 ? (Utf8) this.hitId : null);

            this.hitUrl = in.readString(this.hitUrl instanceof Utf8 ? (Utf8) this.hitUrl : null);

            this.rmLocation = in.readString(this.rmLocation instanceof Utf8 ? (Utf8) this.rmLocation : null);

            this.bookingCentre = in.readString(this.bookingCentre instanceof Utf8 ? (Utf8) this.bookingCentre : null);

            this.errorString = in.readString(this.errorString instanceof Utf8 ? (Utf8) this.errorString : null);

            this.rawContent = in.readString(this.rawContent instanceof Utf8 ? (Utf8) this.rawContent : null);

            this.isSummaryGenerated = in.readBoolean();

            this.genAiSummary = in.readString(this.genAiSummary instanceof Utf8 ? (Utf8) this.genAiSummary : null);

            this.isQualificationGenerated = in.readBoolean();

        } else {
            for (int i = 0; i < 9; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.hitId = in.readString(this.hitId instanceof Utf8 ? (Utf8) this.hitId : null);
                        break;

                    case 1:
                        this.hitUrl = in.readString(this.hitUrl instanceof Utf8 ? (Utf8) this.hitUrl : null);
                        break;

                    case 2:
                        this.rmLocation =
                                in.readString(this.rmLocation instanceof Utf8 ? (Utf8) this.rmLocation : null);
                        break;

                    case 3:
                        this.bookingCentre =
                                in.readString(this.bookingCentre instanceof Utf8 ? (Utf8) this.bookingCentre : null);
                        break;

                    case 4:
                        this.errorString =
                                in.readString(this.errorString instanceof Utf8 ? (Utf8) this.errorString : null);
                        break;

                    case 5:
                        this.rawContent =
                                in.readString(this.rawContent instanceof Utf8 ? (Utf8) this.rawContent : null);
                        break;

                    case 6:
                        this.isSummaryGenerated = in.readBoolean();
                        break;

                    case 7:
                        this.genAiSummary =
                                in.readString(this.genAiSummary instanceof Utf8 ? (Utf8) this.genAiSummary : null);
                        break;

                    case 8:
                        this.isQualificationGenerated = in.readBoolean();
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}
