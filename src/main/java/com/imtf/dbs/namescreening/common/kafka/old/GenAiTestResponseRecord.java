/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.imtf.dbs.namescreening.common.kafka.old;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class GenAiTestResponseRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6556278732313032174L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GenAiTestResponseRecord\",\"namespace\":\"com.imtf.dbs.namescreening.common.kafka.schema\",\"fields\":[{\"name\":\"caseId\",\"type\":\"string\"},{\"name\":\"personId\",\"type\":\"string\"},{\"name\":\"riskCheckId\",\"type\":\"string\"},{\"name\":\"screeningHitId\",\"type\":\"string\"},{\"name\":\"hitUrl\",\"type\":\"string\"},{\"name\":\"errorString\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GenAiTestResponseRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GenAiTestResponseRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GenAiTestResponseRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GenAiTestResponseRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GenAiTestResponseRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GenAiTestResponseRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GenAiTestResponseRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GenAiTestResponseRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GenAiTestResponseRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence caseId;
  private CharSequence personId;
  private CharSequence riskCheckId;
  private CharSequence screeningHitId;
  private CharSequence hitUrl;
  private CharSequence errorString;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GenAiTestResponseRecord() {}

  /**
   * All-args constructor.
   * @param caseId The new value for caseId
   * @param personId The new value for personId
   * @param riskCheckId The new value for riskCheckId
   * @param screeningHitId The new value for screeningHitId
   * @param hitUrl The new value for hitUrl
   * @param errorString The new value for errorString
   */
  public GenAiTestResponseRecord(CharSequence caseId, CharSequence personId, CharSequence riskCheckId, CharSequence screeningHitId, CharSequence hitUrl, CharSequence errorString) {
    this.caseId = caseId;
    this.personId = personId;
    this.riskCheckId = riskCheckId;
    this.screeningHitId = screeningHitId;
    this.hitUrl = hitUrl;
    this.errorString = errorString;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return caseId;
    case 1: return personId;
    case 2: return riskCheckId;
    case 3: return screeningHitId;
    case 4: return hitUrl;
    case 5: return errorString;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: caseId = (CharSequence)value$; break;
    case 1: personId = (CharSequence)value$; break;
    case 2: riskCheckId = (CharSequence)value$; break;
    case 3: screeningHitId = (CharSequence)value$; break;
    case 4: hitUrl = (CharSequence)value$; break;
    case 5: errorString = (CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'caseId' field.
   * @return The value of the 'caseId' field.
   */
  public CharSequence getCaseId() {
    return caseId;
  }


  /**
   * Sets the value of the 'caseId' field.
   * @param value the value to set.
   */
  public void setCaseId(CharSequence value) {
    this.caseId = value;
  }

  /**
   * Gets the value of the 'personId' field.
   * @return The value of the 'personId' field.
   */
  public CharSequence getPersonId() {
    return personId;
  }


  /**
   * Sets the value of the 'personId' field.
   * @param value the value to set.
   */
  public void setPersonId(CharSequence value) {
    this.personId = value;
  }

  /**
   * Gets the value of the 'riskCheckId' field.
   * @return The value of the 'riskCheckId' field.
   */
  public CharSequence getRiskCheckId() {
    return riskCheckId;
  }


  /**
   * Sets the value of the 'riskCheckId' field.
   * @param value the value to set.
   */
  public void setRiskCheckId(CharSequence value) {
    this.riskCheckId = value;
  }

  /**
   * Gets the value of the 'screeningHitId' field.
   * @return The value of the 'screeningHitId' field.
   */
  public CharSequence getScreeningHitId() {
    return screeningHitId;
  }


  /**
   * Sets the value of the 'screeningHitId' field.
   * @param value the value to set.
   */
  public void setScreeningHitId(CharSequence value) {
    this.screeningHitId = value;
  }

  /**
   * Gets the value of the 'hitUrl' field.
   * @return The value of the 'hitUrl' field.
   */
  public CharSequence getHitUrl() {
    return hitUrl;
  }


  /**
   * Sets the value of the 'hitUrl' field.
   * @param value the value to set.
   */
  public void setHitUrl(CharSequence value) {
    this.hitUrl = value;
  }

  /**
   * Gets the value of the 'errorString' field.
   * @return The value of the 'errorString' field.
   */
  public CharSequence getErrorString() {
    return errorString;
  }


  /**
   * Sets the value of the 'errorString' field.
   * @param value the value to set.
   */
  public void setErrorString(CharSequence value) {
    this.errorString = value;
  }

  /**
   * Creates a new GenAiTestResponseRecord RecordBuilder.
   * @return A new GenAiTestResponseRecord RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new GenAiTestResponseRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GenAiTestResponseRecord RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new GenAiTestResponseRecord RecordBuilder by copying an existing GenAiTestResponseRecord instance.
   * @param other The existing instance to copy.
   * @return A new GenAiTestResponseRecord RecordBuilder
   */
  public static Builder newBuilder(GenAiTestResponseRecord other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for GenAiTestResponseRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GenAiTestResponseRecord>
    implements org.apache.avro.data.RecordBuilder<GenAiTestResponseRecord> {

    private CharSequence caseId;
    private CharSequence personId;
    private CharSequence riskCheckId;
    private CharSequence screeningHitId;
    private CharSequence hitUrl;
    private CharSequence errorString;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.caseId)) {
        this.caseId = data().deepCopy(fields()[0].schema(), other.caseId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.personId)) {
        this.personId = data().deepCopy(fields()[1].schema(), other.personId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.riskCheckId)) {
        this.riskCheckId = data().deepCopy(fields()[2].schema(), other.riskCheckId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.screeningHitId)) {
        this.screeningHitId = data().deepCopy(fields()[3].schema(), other.screeningHitId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.hitUrl)) {
        this.hitUrl = data().deepCopy(fields()[4].schema(), other.hitUrl);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.errorString)) {
        this.errorString = data().deepCopy(fields()[5].schema(), other.errorString);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing GenAiTestResponseRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(GenAiTestResponseRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.caseId)) {
        this.caseId = data().deepCopy(fields()[0].schema(), other.caseId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.personId)) {
        this.personId = data().deepCopy(fields()[1].schema(), other.personId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.riskCheckId)) {
        this.riskCheckId = data().deepCopy(fields()[2].schema(), other.riskCheckId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.screeningHitId)) {
        this.screeningHitId = data().deepCopy(fields()[3].schema(), other.screeningHitId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hitUrl)) {
        this.hitUrl = data().deepCopy(fields()[4].schema(), other.hitUrl);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.errorString)) {
        this.errorString = data().deepCopy(fields()[5].schema(), other.errorString);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'caseId' field.
      * @return The value.
      */
    public CharSequence getCaseId() {
      return caseId;
    }


    /**
      * Sets the value of the 'caseId' field.
      * @param value The value of 'caseId'.
      * @return This builder.
      */
    public Builder setCaseId(CharSequence value) {
      validate(fields()[0], value);
      this.caseId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'caseId' field has been set.
      * @return True if the 'caseId' field has been set, false otherwise.
      */
    public boolean hasCaseId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'caseId' field.
      * @return This builder.
      */
    public Builder clearCaseId() {
      caseId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'personId' field.
      * @return The value.
      */
    public CharSequence getPersonId() {
      return personId;
    }


    /**
      * Sets the value of the 'personId' field.
      * @param value The value of 'personId'.
      * @return This builder.
      */
    public Builder setPersonId(CharSequence value) {
      validate(fields()[1], value);
      this.personId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'personId' field has been set.
      * @return True if the 'personId' field has been set, false otherwise.
      */
    public boolean hasPersonId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'personId' field.
      * @return This builder.
      */
    public Builder clearPersonId() {
      personId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'riskCheckId' field.
      * @return The value.
      */
    public CharSequence getRiskCheckId() {
      return riskCheckId;
    }


    /**
      * Sets the value of the 'riskCheckId' field.
      * @param value The value of 'riskCheckId'.
      * @return This builder.
      */
    public Builder setRiskCheckId(CharSequence value) {
      validate(fields()[2], value);
      this.riskCheckId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'riskCheckId' field has been set.
      * @return True if the 'riskCheckId' field has been set, false otherwise.
      */
    public boolean hasRiskCheckId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'riskCheckId' field.
      * @return This builder.
      */
    public Builder clearRiskCheckId() {
      riskCheckId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'screeningHitId' field.
      * @return The value.
      */
    public CharSequence getScreeningHitId() {
      return screeningHitId;
    }


    /**
      * Sets the value of the 'screeningHitId' field.
      * @param value The value of 'screeningHitId'.
      * @return This builder.
      */
    public Builder setScreeningHitId(CharSequence value) {
      validate(fields()[3], value);
      this.screeningHitId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'screeningHitId' field has been set.
      * @return True if the 'screeningHitId' field has been set, false otherwise.
      */
    public boolean hasScreeningHitId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'screeningHitId' field.
      * @return This builder.
      */
    public Builder clearScreeningHitId() {
      screeningHitId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'hitUrl' field.
      * @return The value.
      */
    public CharSequence getHitUrl() {
      return hitUrl;
    }


    /**
      * Sets the value of the 'hitUrl' field.
      * @param value The value of 'hitUrl'.
      * @return This builder.
      */
    public Builder setHitUrl(CharSequence value) {
      validate(fields()[4], value);
      this.hitUrl = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'hitUrl' field has been set.
      * @return True if the 'hitUrl' field has been set, false otherwise.
      */
    public boolean hasHitUrl() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'hitUrl' field.
      * @return This builder.
      */
    public Builder clearHitUrl() {
      hitUrl = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorString' field.
      * @return The value.
      */
    public CharSequence getErrorString() {
      return errorString;
    }


    /**
      * Sets the value of the 'errorString' field.
      * @param value The value of 'errorString'.
      * @return This builder.
      */
    public Builder setErrorString(CharSequence value) {
      validate(fields()[5], value);
      this.errorString = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'errorString' field has been set.
      * @return True if the 'errorString' field has been set, false otherwise.
      */
    public boolean hasErrorString() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'errorString' field.
      * @return This builder.
      */
    public Builder clearErrorString() {
      errorString = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GenAiTestResponseRecord build() {
      try {
        GenAiTestResponseRecord record = new GenAiTestResponseRecord();
        record.caseId = fieldSetFlags()[0] ? this.caseId : (CharSequence) defaultValue(fields()[0]);
        record.personId = fieldSetFlags()[1] ? this.personId : (CharSequence) defaultValue(fields()[1]);
        record.riskCheckId = fieldSetFlags()[2] ? this.riskCheckId : (CharSequence) defaultValue(fields()[2]);
        record.screeningHitId = fieldSetFlags()[3] ? this.screeningHitId : (CharSequence) defaultValue(fields()[3]);
        record.hitUrl = fieldSetFlags()[4] ? this.hitUrl : (CharSequence) defaultValue(fields()[4]);
        record.errorString = fieldSetFlags()[5] ? this.errorString : (CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GenAiTestResponseRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<GenAiTestResponseRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GenAiTestResponseRecord>
    READER$ = (org.apache.avro.io.DatumReader<GenAiTestResponseRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.caseId);

    out.writeString(this.personId);

    out.writeString(this.riskCheckId);

    out.writeString(this.screeningHitId);

    out.writeString(this.hitUrl);

    out.writeString(this.errorString);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.caseId = in.readString(this.caseId instanceof Utf8 ? (Utf8)this.caseId : null);

      this.personId = in.readString(this.personId instanceof Utf8 ? (Utf8)this.personId : null);

      this.riskCheckId = in.readString(this.riskCheckId instanceof Utf8 ? (Utf8)this.riskCheckId : null);

      this.screeningHitId = in.readString(this.screeningHitId instanceof Utf8 ? (Utf8)this.screeningHitId : null);

      this.hitUrl = in.readString(this.hitUrl instanceof Utf8 ? (Utf8)this.hitUrl : null);

      this.errorString = in.readString(this.errorString instanceof Utf8 ? (Utf8)this.errorString : null);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.caseId = in.readString(this.caseId instanceof Utf8 ? (Utf8)this.caseId : null);
          break;

        case 1:
          this.personId = in.readString(this.personId instanceof Utf8 ? (Utf8)this.personId : null);
          break;

        case 2:
          this.riskCheckId = in.readString(this.riskCheckId instanceof Utf8 ? (Utf8)this.riskCheckId : null);
          break;

        case 3:
          this.screeningHitId = in.readString(this.screeningHitId instanceof Utf8 ? (Utf8)this.screeningHitId : null);
          break;

        case 4:
          this.hitUrl = in.readString(this.hitUrl instanceof Utf8 ? (Utf8)this.hitUrl : null);
          break;

        case 5:
          this.errorString = in.readString(this.errorString instanceof Utf8 ? (Utf8)this.errorString : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










