package com.imtf.dbs.namescreening.common.kafka.schema;
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class GenAiRequestAdditionalDetails extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 2031881493605235326L;

    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
            .parse(
                    "{\"type\":\"record\",\"name\":\"GenAiRequestAdditionalDetails\",\"fields\":[{\"name\":\"nationality\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gender\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"dateOfBirth\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"identificationNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"countryOfIncorporation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"dateOfIncorporation\",\"type\":[\"null\",\"string\"],\"default\":null}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<GenAiRequestAdditionalDetails> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<GenAiRequestAdditionalDetails> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<GenAiRequestAdditionalDetails> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<GenAiRequestAdditionalDetails> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<GenAiRequestAdditionalDetails> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this GenAiRequestAdditionalDetails to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a GenAiRequestAdditionalDetails from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a GenAiRequestAdditionalDetails instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static GenAiRequestAdditionalDetails fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private CharSequence nationality;
    private CharSequence gender;
    private CharSequence dateOfBirth;
    private CharSequence identificationNumber;
    private CharSequence countryOfIncorporation;
    private CharSequence dateOfIncorporation;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public GenAiRequestAdditionalDetails() {}

    /**
     * All-args constructor.
     * @param nationality The new value for nationality
     * @param gender The new value for gender
     * @param dateOfBirth The new value for dateOfBirth
     * @param identificationNumber The new value for identificationNumber
     * @param countryOfIncorporation The new value for countryOfIncorporation
     * @param dateOfIncorporation The new value for dateOfIncorporation
     */
    public GenAiRequestAdditionalDetails(
            CharSequence nationality,
            CharSequence gender,
            CharSequence dateOfBirth,
            CharSequence identificationNumber,
            CharSequence countryOfIncorporation,
            CharSequence dateOfIncorporation) {
        this.nationality = nationality;
        this.gender = gender;
        this.dateOfBirth = dateOfBirth;
        this.identificationNumber = identificationNumber;
        this.countryOfIncorporation = countryOfIncorporation;
        this.dateOfIncorporation = dateOfIncorporation;
    }

    @Override
    public SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return nationality;
            case 1:
                return gender;
            case 2:
                return dateOfBirth;
            case 3:
                return identificationNumber;
            case 4:
                return countryOfIncorporation;
            case 5:
                return dateOfIncorporation;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                nationality = (CharSequence) value$;
                break;
            case 1:
                gender = (CharSequence) value$;
                break;
            case 2:
                dateOfBirth = (CharSequence) value$;
                break;
            case 3:
                identificationNumber = (CharSequence) value$;
                break;
            case 4:
                countryOfIncorporation = (CharSequence) value$;
                break;
            case 5:
                dateOfIncorporation = (CharSequence) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'nationality' field.
     * @return The value of the 'nationality' field.
     */
    public CharSequence getNationality() {
        return nationality;
    }

    /**
     * Sets the value of the 'nationality' field.
     * @param value the value to set.
     */
    public void setNationality(CharSequence value) {
        this.nationality = value;
    }

    /**
     * Gets the value of the 'gender' field.
     * @return The value of the 'gender' field.
     */
    public CharSequence getGender() {
        return gender;
    }

    /**
     * Sets the value of the 'gender' field.
     * @param value the value to set.
     */
    public void setGender(CharSequence value) {
        this.gender = value;
    }

    /**
     * Gets the value of the 'dateOfBirth' field.
     * @return The value of the 'dateOfBirth' field.
     */
    public CharSequence getDateOfBirth() {
        return dateOfBirth;
    }

    /**
     * Sets the value of the 'dateOfBirth' field.
     * @param value the value to set.
     */
    public void setDateOfBirth(CharSequence value) {
        this.dateOfBirth = value;
    }

    /**
     * Gets the value of the 'identificationNumber' field.
     * @return The value of the 'identificationNumber' field.
     */
    public CharSequence getIdentificationNumber() {
        return identificationNumber;
    }

    /**
     * Sets the value of the 'identificationNumber' field.
     * @param value the value to set.
     */
    public void setIdentificationNumber(CharSequence value) {
        this.identificationNumber = value;
    }

    /**
     * Gets the value of the 'countryOfIncorporation' field.
     * @return The value of the 'countryOfIncorporation' field.
     */
    public CharSequence getCountryOfIncorporation() {
        return countryOfIncorporation;
    }

    /**
     * Sets the value of the 'countryOfIncorporation' field.
     * @param value the value to set.
     */
    public void setCountryOfIncorporation(CharSequence value) {
        this.countryOfIncorporation = value;
    }

    /**
     * Gets the value of the 'dateOfIncorporation' field.
     * @return The value of the 'dateOfIncorporation' field.
     */
    public CharSequence getDateOfIncorporation() {
        return dateOfIncorporation;
    }

    /**
     * Sets the value of the 'dateOfIncorporation' field.
     * @param value the value to set.
     */
    public void setDateOfIncorporation(CharSequence value) {
        this.dateOfIncorporation = value;
    }

    /**
     * Creates a new GenAiRequestAdditionalDetails RecordBuilder.
     * @return A new GenAiRequestAdditionalDetails RecordBuilder
     */
    public static Builder newBuilder() {
        return new Builder();
    }

    /**
     * Creates a new GenAiRequestAdditionalDetails RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new GenAiRequestAdditionalDetails RecordBuilder
     */
    public static Builder newBuilder(Builder other) {
        if (other == null) {
            return new Builder();
        } else {
            return new Builder(other);
        }
    }

    /**
     * Creates a new GenAiRequestAdditionalDetails RecordBuilder by copying an existing GenAiRequestAdditionalDetails instance.
     * @param other The existing instance to copy.
     * @return A new GenAiRequestAdditionalDetails RecordBuilder
     */
    public static Builder newBuilder(GenAiRequestAdditionalDetails other) {
        if (other == null) {
            return new Builder();
        } else {
            return new Builder(other);
        }
    }

    /**
     * RecordBuilder for GenAiRequestAdditionalDetails instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder
            extends org.apache.avro.specific.SpecificRecordBuilderBase<GenAiRequestAdditionalDetails>
            implements org.apache.avro.data.RecordBuilder<GenAiRequestAdditionalDetails> {

        private CharSequence nationality;
        private CharSequence gender;
        private CharSequence dateOfBirth;
        private CharSequence identificationNumber;
        private CharSequence countryOfIncorporation;
        private CharSequence dateOfIncorporation;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.nationality)) {
                this.nationality = data().deepCopy(fields()[0].schema(), other.nationality);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.gender)) {
                this.gender = data().deepCopy(fields()[1].schema(), other.gender);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.dateOfBirth)) {
                this.dateOfBirth = data().deepCopy(fields()[2].schema(), other.dateOfBirth);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.identificationNumber)) {
                this.identificationNumber = data().deepCopy(fields()[3].schema(), other.identificationNumber);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.countryOfIncorporation)) {
                this.countryOfIncorporation = data().deepCopy(fields()[4].schema(), other.countryOfIncorporation);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.dateOfIncorporation)) {
                this.dateOfIncorporation = data().deepCopy(fields()[5].schema(), other.dateOfIncorporation);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
        }

        /**
         * Creates a Builder by copying an existing GenAiRequestAdditionalDetails instance
         * @param other The existing instance to copy.
         */
        private Builder(GenAiRequestAdditionalDetails other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.nationality)) {
                this.nationality = data().deepCopy(fields()[0].schema(), other.nationality);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.gender)) {
                this.gender = data().deepCopy(fields()[1].schema(), other.gender);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.dateOfBirth)) {
                this.dateOfBirth = data().deepCopy(fields()[2].schema(), other.dateOfBirth);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.identificationNumber)) {
                this.identificationNumber = data().deepCopy(fields()[3].schema(), other.identificationNumber);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.countryOfIncorporation)) {
                this.countryOfIncorporation = data().deepCopy(fields()[4].schema(), other.countryOfIncorporation);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.dateOfIncorporation)) {
                this.dateOfIncorporation = data().deepCopy(fields()[5].schema(), other.dateOfIncorporation);
                fieldSetFlags()[5] = true;
            }
        }

        /**
         * Gets the value of the 'nationality' field.
         * @return The value.
         */
        public CharSequence getNationality() {
            return nationality;
        }

        /**
         * Sets the value of the 'nationality' field.
         * @param value The value of 'nationality'.
         * @return This builder.
         */
        public Builder setNationality(CharSequence value) {
            validate(fields()[0], value);
            this.nationality = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'nationality' field has been set.
         * @return True if the 'nationality' field has been set, false otherwise.
         */
        public boolean hasNationality() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'nationality' field.
         * @return This builder.
         */
        public Builder clearNationality() {
            nationality = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'gender' field.
         * @return The value.
         */
        public CharSequence getGender() {
            return gender;
        }

        /**
         * Sets the value of the 'gender' field.
         * @param value The value of 'gender'.
         * @return This builder.
         */
        public Builder setGender(CharSequence value) {
            validate(fields()[1], value);
            this.gender = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'gender' field has been set.
         * @return True if the 'gender' field has been set, false otherwise.
         */
        public boolean hasGender() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'gender' field.
         * @return This builder.
         */
        public Builder clearGender() {
            gender = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'dateOfBirth' field.
         * @return The value.
         */
        public CharSequence getDateOfBirth() {
            return dateOfBirth;
        }

        /**
         * Sets the value of the 'dateOfBirth' field.
         * @param value The value of 'dateOfBirth'.
         * @return This builder.
         */
        public Builder setDateOfBirth(CharSequence value) {
            validate(fields()[2], value);
            this.dateOfBirth = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'dateOfBirth' field has been set.
         * @return True if the 'dateOfBirth' field has been set, false otherwise.
         */
        public boolean hasDateOfBirth() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'dateOfBirth' field.
         * @return This builder.
         */
        public Builder clearDateOfBirth() {
            dateOfBirth = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'identificationNumber' field.
         * @return The value.
         */
        public CharSequence getIdentificationNumber() {
            return identificationNumber;
        }

        /**
         * Sets the value of the 'identificationNumber' field.
         * @param value The value of 'identificationNumber'.
         * @return This builder.
         */
        public Builder setIdentificationNumber(CharSequence value) {
            validate(fields()[3], value);
            this.identificationNumber = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'identificationNumber' field has been set.
         * @return True if the 'identificationNumber' field has been set, false otherwise.
         */
        public boolean hasIdentificationNumber() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'identificationNumber' field.
         * @return This builder.
         */
        public Builder clearIdentificationNumber() {
            identificationNumber = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'countryOfIncorporation' field.
         * @return The value.
         */
        public CharSequence getCountryOfIncorporation() {
            return countryOfIncorporation;
        }

        /**
         * Sets the value of the 'countryOfIncorporation' field.
         * @param value The value of 'countryOfIncorporation'.
         * @return This builder.
         */
        public Builder setCountryOfIncorporation(CharSequence value) {
            validate(fields()[4], value);
            this.countryOfIncorporation = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'countryOfIncorporation' field has been set.
         * @return True if the 'countryOfIncorporation' field has been set, false otherwise.
         */
        public boolean hasCountryOfIncorporation() {
            return fieldSetFlags()[4];
        }

        /**
         * Clears the value of the 'countryOfIncorporation' field.
         * @return This builder.
         */
        public Builder clearCountryOfIncorporation() {
            countryOfIncorporation = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'dateOfIncorporation' field.
         * @return The value.
         */
        public CharSequence getDateOfIncorporation() {
            return dateOfIncorporation;
        }

        /**
         * Sets the value of the 'dateOfIncorporation' field.
         * @param value The value of 'dateOfIncorporation'.
         * @return This builder.
         */
        public Builder setDateOfIncorporation(CharSequence value) {
            validate(fields()[5], value);
            this.dateOfIncorporation = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'dateOfIncorporation' field has been set.
         * @return True if the 'dateOfIncorporation' field has been set, false otherwise.
         */
        public boolean hasDateOfIncorporation() {
            return fieldSetFlags()[5];
        }

        /**
         * Clears the value of the 'dateOfIncorporation' field.
         * @return This builder.
         */
        public Builder clearDateOfIncorporation() {
            dateOfIncorporation = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public GenAiRequestAdditionalDetails build() {
            try {
                GenAiRequestAdditionalDetails record = new GenAiRequestAdditionalDetails();
                record.nationality = fieldSetFlags()[0] ? this.nationality : (CharSequence) defaultValue(fields()[0]);
                record.gender = fieldSetFlags()[1] ? this.gender : (CharSequence) defaultValue(fields()[1]);
                record.dateOfBirth = fieldSetFlags()[2] ? this.dateOfBirth : (CharSequence) defaultValue(fields()[2]);
                record.identificationNumber =
                        fieldSetFlags()[3] ? this.identificationNumber : (CharSequence) defaultValue(fields()[3]);
                record.countryOfIncorporation =
                        fieldSetFlags()[4] ? this.countryOfIncorporation : (CharSequence) defaultValue(fields()[4]);
                record.dateOfIncorporation =
                        fieldSetFlags()[5] ? this.dateOfIncorporation : (CharSequence) defaultValue(fields()[5]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<GenAiRequestAdditionalDetails> WRITER$ =
            (org.apache.avro.io.DatumWriter<GenAiRequestAdditionalDetails>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<GenAiRequestAdditionalDetails> READER$ =
            (org.apache.avro.io.DatumReader<GenAiRequestAdditionalDetails>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
        if (this.nationality == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.nationality);
        }

        if (this.gender == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.gender);
        }

        if (this.dateOfBirth == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.dateOfBirth);
        }

        if (this.identificationNumber == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.identificationNumber);
        }

        if (this.countryOfIncorporation == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.countryOfIncorporation);
        }

        if (this.dateOfIncorporation == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.dateOfIncorporation);
        }
    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            if (in.readIndex() != 1) {
                in.readNull();
                this.nationality = null;
            } else {
                this.nationality = in.readString(this.nationality instanceof Utf8 ? (Utf8) this.nationality : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.gender = null;
            } else {
                this.gender = in.readString(this.gender instanceof Utf8 ? (Utf8) this.gender : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.dateOfBirth = null;
            } else {
                this.dateOfBirth = in.readString(this.dateOfBirth instanceof Utf8 ? (Utf8) this.dateOfBirth : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.identificationNumber = null;
            } else {
                this.identificationNumber = in.readString(
                        this.identificationNumber instanceof Utf8 ? (Utf8) this.identificationNumber : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.countryOfIncorporation = null;
            } else {
                this.countryOfIncorporation = in.readString(
                        this.countryOfIncorporation instanceof Utf8 ? (Utf8) this.countryOfIncorporation : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.dateOfIncorporation = null;
            } else {
                this.dateOfIncorporation = in.readString(
                        this.dateOfIncorporation instanceof Utf8 ? (Utf8) this.dateOfIncorporation : null);
            }

        } else {
            for (int i = 0; i < 6; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.nationality = null;
                        } else {
                            this.nationality =
                                    in.readString(this.nationality instanceof Utf8 ? (Utf8) this.nationality : null);
                        }
                        break;

                    case 1:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.gender = null;
                        } else {
                            this.gender = in.readString(this.gender instanceof Utf8 ? (Utf8) this.gender : null);
                        }
                        break;

                    case 2:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.dateOfBirth = null;
                        } else {
                            this.dateOfBirth =
                                    in.readString(this.dateOfBirth instanceof Utf8 ? (Utf8) this.dateOfBirth : null);
                        }
                        break;

                    case 3:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.identificationNumber = null;
                        } else {
                            this.identificationNumber = in.readString(
                                    this.identificationNumber instanceof Utf8
                                            ? (Utf8) this.identificationNumber
                                            : null);
                        }
                        break;

                    case 4:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.countryOfIncorporation = null;
                        } else {
                            this.countryOfIncorporation = in.readString(
                                    this.countryOfIncorporation instanceof Utf8
                                            ? (Utf8) this.countryOfIncorporation
                                            : null);
                        }
                        break;

                    case 5:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.dateOfIncorporation = null;
                        } else {
                            this.dateOfIncorporation = in.readString(
                                    this.dateOfIncorporation instanceof Utf8 ? (Utf8) this.dateOfIncorporation : null);
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}
